{"componentChunkName":"component---src-layout-documentation-tsx","path":"/components/overlays/popover/","result":{"data":{"site":{"siteMetadata":{"title":"Looker UI Components"}},"mdx":{"id":"1c8c3ddd-291d-5a9d-a84a-8605cc959a04","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Popover\",\n  \"propsOf\": \"Popover\",\n  \"github\": \"Popover\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Popovers are containers for things like contextual information, menus, and related actions.\"), mdx(\"h2\", null, \"Terminology\"), mdx(\"p\", null, \"Popovers are assembled of two pieces: an overlay and a surface. Unlike \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/components/modals/\"\n  }), \"Modals\"), \", the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Popover\"), \" overlay is transparent, but it still blocks the application behind it until it is closed, with the exception of \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"#grouped-popovers\"\n  }), \"grouped Popovers\"), \". The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Popover\"), \"'s surface renders the content above the overlay and the rest of the application.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Popover\\n  content={\\n    <PopoverContent p=\\\"large\\\" width=\\\"360px\\\">\\n      <Heading>Wildebeest</Heading>\\n\\n      <Text fontSize=\\\"small\\\">\\n        The blue wildebeest, also called the common wildebeest, white-bearded\\n        wildebeest or brindled gnu, is a large antelope and one of the two\\n        species of wildebeest. It is placed in the genus Connochaetes and family\\n        Bovidae and has a close taxonomic relationship with the black\\n        wildebeest. The blue wildebeest is known to have five subspecies. This\\n        broad-shouldered antelope has a muscular, front-heavy appearance, with a\\n        distinctive robust muzzle. Young blue wildebeest are born tawny brown,\\n        and begin to take on their adult colouration at the age of two months.\\n        The adults' hues range from a deep slate or bluish gray to light gray or\\n        even grayish brown. Both sexes possess a pair of large curved horns.\\n      </Text>\\n    </PopoverContent>\\n  }\\n>\\n  {(onClick, ref, className) => (\\n    <Button\\n      aria-haspopup=\\\"true\\\"\\n      onClick={onClick}\\n      ref={ref}\\n      className={className}\\n    >\\n      A Wikipedia article about Wildebeests\\n    </Button>\\n  )}\\n</Popover>\\n\")), mdx(\"h2\", null, \"Placement and Arrow\"), mdx(\"p\", null, \"Placement can be adjusted with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"placement\"), \" prop. Valid positions are \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"top\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"left\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"right\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bottom\"), \", each can be augmented with -\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"start\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-end\"), \" which places the edge of the popover at the start or end of the target.\"), mdx(\"p\", null, \"If you want to hide the popover arrow you can set the prop \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arrow\"), \" prop to false.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \";() => {\\n  const popoverContent = (\\n    <PopoverContent>\\n      <Paragraph width={300} p=\\\"xxlarge\\\">\\n        \\uD83D\\uDC4B Hello, I am a popover!\\n      </Paragraph>\\n    </PopoverContent>\\n  )\\n\\n  const button = (title, onClick, ref, className) => (\\n    <Button\\n      aria-haspopup=\\\"true\\\"\\n      onClick={onClick}\\n      ref={ref}\\n      className={className}\\n    >\\n      {title}\\n    </Button>\\n  )\\n\\n  return (\\n    <SpaceVertical>\\n      <Space between>\\n        <Popover content={popoverContent}>\\n          {(onClick, ref, className) =>\\n            button('Default', onClick, ref, className)\\n          }\\n        </Popover>\\n        <Popover content={popoverContent} placement=\\\"right\\\">\\n          {(onClick, ref, className) =>\\n            button('Right', onClick, ref, className)\\n          }\\n        </Popover>\\n        <Popover content={popoverContent} placement=\\\"left\\\">\\n          {(onClick, ref, className) => button('Left', onClick, ref, className)}\\n        </Popover>\\n      </Space>\\n      <Space>\\n        <Popover content={popoverContent} placement=\\\"bottom-start\\\">\\n          {(onClick, ref, className) =>\\n            button('Bottom Start', onClick, ref, className)\\n          }\\n        </Popover>\\n        <Popover content={popoverContent} placement=\\\"right-end\\\">\\n          {(onClick, ref, className) =>\\n            button('Right End', onClick, ref, className)\\n          }\\n        </Popover>\\n        <Popover content={popoverContent} placement=\\\"top-start\\\" arrow={false}>\\n          {(onClick, ref, className) =>\\n            button('Top Start - No arrow', onClick, ref, className)\\n          }\\n        </Popover>\\n      </Space>\\n    </SpaceVertical>\\n  )\\n}\\n\")), mdx(\"h2\", null, \"Grouped Popovers\"), mdx(\"p\", null, \"By default Popover cancels event bubbling when a click event triggers the closure of the Popover. \", \"*\", \" This was deemed a best practice as it prevents inadveted destructive actions and mirrors behavior seen in many commonly used applications (e.g. Chrome).\"), mdx(\"p\", null, \"However, where several related Popover components are grouped together, cancelling event bubbling for the \\\"dismissal click\\\" can make for an awkward UX. This functionality is used for items grouped to create a larger navigation component or associated controls such as a collection of filters.\"), mdx(\"p\", null, \"To create a group, assigned a reference to an containing element and then assign the reference to that element to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"groupedPopoversRef\"), \" on each \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Popover\"), \". This will override the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Popover\"), \" component's usual behavior of cancelling event propogation on the clicks outside of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ModalPortal\"), \" associated with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Popover\"), \". The first click outside of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ModalPortal\"), \" will still close the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Popover\"), \" but click event propogation or otherwise surpressed and instead will be allowed to produce its usual behavior.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \";() => {\\n  const groupRef = React.useRef()\\n  const content = (\\n    <PopoverContent p=\\\"large\\\" width=\\\"360px\\\">\\n      Example Popover text.\\n    </PopoverContent>\\n  )\\n  return (\\n    <Space>\\n      <Space\\n        around\\n        ref={groupRef}\\n        p=\\\"large\\\"\\n        style={{ border: '3px solid green' }}\\n      >\\n        <Popover content={content} groupedPopoversRef={groupRef}>\\n          {(onClick, ref, className) => (\\n            <Button\\n              aria-haspopup=\\\"true\\\"\\n              onClick={onClick}\\n              ref={ref}\\n              className={className}\\n            >\\n              Instant Click\\n            </Button>\\n          )}\\n        </Popover>\\n        <Popover content={content} groupedPopoversRef={groupRef}>\\n          {(onClick, ref, className) => (\\n            <Button\\n              aria-haspopup=\\\"true\\\"\\n              onClick={onClick}\\n              ref={ref}\\n              mx=\\\"large\\\"\\n              className={className}\\n            >\\n              Instant Click\\n            </Button>\\n          )}\\n        </Popover>\\n        <Popover content={content}>\\n          {(onClick, ref, className) => (\\n            <ButtonOutline\\n              aria-haspopup=\\\"true\\\"\\n              onClick={onClick}\\n              ref={ref}\\n              className={className}\\n            >\\n              Defer Click\\n            </ButtonOutline>\\n          )}\\n        </Popover>\\n      </Space>\\n      <Popover content={content}>\\n        {(onClick, ref, className) => (\\n          <ButtonTransparent\\n            aria-haspopup=\\\"true\\\"\\n            mx=\\\"xlarge\\\"\\n            my=\\\"large\\\"\\n            onClick={onClick}\\n            ref={ref}\\n            className={className}\\n          >\\n            Outside Group\\n          </ButtonTransparent>\\n        )}\\n      </Popover>\\n    </Space>\\n  )\\n}\\n\")), mdx(\"h2\", null, \"Disclosing the Trigger on Hover\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \";() => {\\n  const hoverRef = React.useRef()\\n  const content = <PopoverContent p=\\\"large\\\">I'm in the popover</PopoverContent>\\n  return (\\n    <Card ref={hoverRef} raised>\\n      <CardContent>\\n        <Space between>\\n          <Paragraph>\\n            Hovering in this card will show the button that triggers the\\n            popover.\\n          </Paragraph>\\n          <Popover content={content} hoverDisclosureRef={hoverRef}>\\n            {(onClick, ref, className) => (\\n              <IconButton\\n                icon=\\\"DotsVert\\\"\\n                aria-haspopup=\\\"true\\\"\\n                label=\\\"More Options\\\"\\n                onClick={onClick}\\n                ref={ref}\\n                className={className}\\n              />\\n            )}\\n          </Popover>\\n        </Space>\\n      </CardContent>\\n    </Card>\\n  )\\n}\\n\")), mdx(\"h2\", null, \"PopoverContent\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PopoverContent\"), \" is a simple container component that can be used to apply a consistent style to content placed within a Popover surface.\"), mdx(\"h2\", null, \"Accessibility\"), mdx(\"p\", null, \"Popover triggers should have the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"aria-haspopover\"), \" attribute set to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \", you can see an example on the buttons that trigger the popovers below.\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"figma":null,"github":"Popover","propsOf":"Popover","status":null,"title":"Popover"},"tableOfContents":{"items":[{"url":"#terminology","title":"Terminology"},{"url":"#placement-and-arrow","title":"Placement and Arrow"},{"url":"#grouped-popovers","title":"Grouped Popovers"},{"url":"#disclosing-the-trigger-on-hover","title":"Disclosing the Trigger on Hover"},{"url":"#popovercontent","title":"PopoverContent"},{"url":"#accessibility","title":"Accessibility"}]}}},"pageContext":{"id":"1c8c3ddd-291d-5a9d-a84a-8605cc959a04"}}}