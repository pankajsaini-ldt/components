{"componentChunkName":"component---src-layout-documentation-tsx","path":"/components/actions/icon-button/","result":{"data":{"site":{"siteMetadata":{"title":"Looker UI Components"}},"mdx":{"id":"7484e2d9-7f39-50bd-8bb6-a9f597d6b13a","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"IconButton\",\n  \"status\": \"stable\",\n  \"github\": \"Button/IconButton.tsx\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IconButton\"), \"'s are used when you need an icon to trigger an action, such as showing a dialog or deleting an item.\\nIt require a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"label\"), \" that describes it's action. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"label\"), \" should be descriptive and succinct.\\nIf you need an icon for purely decorative purposes use an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Icon />\"), \" instead.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Space evenly>\\n  <IconButton icon=\\\"Plus\\\" label=\\\"Add Something Neat\\\" />\\n  <IconButton icon=\\\"Gear\\\" label=\\\"Settings\\\" />\\n  <IconButton icon=\\\"Trash\\\" label=\\\"Trash It\\\" />\\n  <IconButton icon=\\\"Close\\\" label=\\\"Close\\\" />\\n  <IconButton icon=\\\"Favorite\\\" label=\\\"Add to Favorites\\\" />\\n</Space>\\n\")), mdx(\"h3\", null, \"IconButton Options\"), mdx(\"h2\", null, \"Sizes\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"xxsmall\"), \" | \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"xsmall\"), \" (default) | \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"small\"), \" | \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"medium\"), \" | \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"large\"))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Space evenly>\\n  <IconButton icon=\\\"Favorite\\\" label=\\\"Add to Favorites\\\" size=\\\"xxsmall\\\" />\\n  <IconButton icon=\\\"Favorite\\\" label=\\\"Add to Favorites\\\" />\\n  <IconButton icon=\\\"Favorite\\\" label=\\\"Add to Favorites\\\" size=\\\"small\\\" />\\n  <IconButton icon=\\\"Favorite\\\" label=\\\"Add to Favorites\\\" size=\\\"medium\\\" />\\n  <IconButton icon=\\\"Favorite\\\" label=\\\"Add to Favorites\\\" size=\\\"large\\\" />\\n</Space>\\n\")), mdx(\"h2\", null, \"Shapes\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"round\"), \" | \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"square\"), \" (default)\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Space evenly>\\n  <IconButton\\n    icon=\\\"Trash\\\"\\n    label=\\\"Trash it\\\"\\n    outline\\n    shape=\\\"round\\\"\\n    size=\\\"xxsmall\\\"\\n  />\\n  <IconButton\\n    icon=\\\"Trash\\\"\\n    label=\\\"Trash it\\\"\\n    outline\\n    shape=\\\"round\\\"\\n    size=\\\"large\\\"\\n  />\\n</Space>\\n\")), mdx(\"h2\", null, \"Color\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"critical\"), \" | \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"neutral\"), \" (default) | \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"key\"))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Space evenly>\\n  <IconButton color=\\\"critical\\\" icon=\\\"Gear\\\" label=\\\"Settings\\\" size=\\\"large\\\" />\\n  <IconButton color=\\\"neutral\\\" icon=\\\"Gear\\\" label=\\\"Settings\\\" size=\\\"large\\\" />\\n  <IconButton color=\\\"key\\\" icon=\\\"Gear\\\" label=\\\"Settings\\\" size=\\\"large\\\" />\\n</Space>\\n\")), mdx(\"h2\", null, \"Animation\"), mdx(\"p\", null, \"Create the styled rules desired and wrap the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IconButton\"), \" component on it.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \";() => {\\n  const HoverVariantButton = styled(IconButton)`\\n    transition: transform 0.5s;\\n    &:hover {\\n      transform: rotate(45deg);\\n    }\\n  `\\n  return <HoverVariantButton label=\\\"Close\\\" icon=\\\"Close\\\" size=\\\"large\\\" outline />\\n}\\n\")), mdx(\"h2\", null, \"IconButton & Tooltip\"), mdx(\"p\", null, \"You can also use your own \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tooltip\"), \" around \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IconButton\"), \" (this will effectively remove the \\\"built-in\\\" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tooltip\"), \")\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Tooltip content=\\\"I'm a little teapot\\\">\\n  <IconButton label=\\\"Add Something Neat\\\" icon=\\\"Plus\\\" size=\\\"xxsmall\\\" />\\n</Tooltip>\\n\")), mdx(\"h2\", null, \"Disabling the Tooltip\"), mdx(\"p\", null, \"If you would like to disable the tooltip entirely, use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"tooltipDisabled\"), \" prop.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<IconButton label=\\\"no tooltip\\\" icon=\\\"Home\\\" size=\\\"large\\\" tooltipDisabled />\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"figma":null,"github":"Button/IconButton.tsx","propsOf":null,"status":"stable","title":"IconButton"},"tableOfContents":{"items":[{"url":"#sizes","title":"Sizes"},{"url":"#shapes","title":"Shapes"},{"url":"#color","title":"Color"},{"url":"#animation","title":"Animation"},{"url":"#iconbutton--tooltip","title":"IconButton & Tooltip"},{"url":"#disabling-the-tooltip","title":"Disabling the Tooltip"}]}}},"pageContext":{"id":"7484e2d9-7f39-50bd-8bb6-a9f597d6b13a"}}}