{"componentChunkName":"component---src-layout-documentation-tsx","path":"/components/actions/button/","result":{"data":{"site":{"siteMetadata":{"title":"Looker UI Components"}},"mdx":{"id":"4f355b86-f9db-5b71-b37f-df705b76d770","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Button\",\n  \"status\": \"stable\",\n  \"github\": \"Button/Button.tsx\",\n  \"propsOf\": \"Button\",\n  \"figma\": \"file/Dirjx0RKbOOrLacqHq61By/Button-%26-Links?node-id=914%3A981&viewport=1741%2C951%2C1\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", null, \"Default\"), mdx(\"p\", null, \"Use a default button for the most frequently used action or most important action on a page. Default buttons should only appear once on a page. They are sometimes accompanied by a secondary button.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Button>Default Button</Button>\\n\")), mdx(\"h4\", null, \"Button states\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Space>\\n  <Button>Idle</Button>\\n  <Button className=\\\"hover\\\">Hover</Button>\\n  <Button className=\\\"active\\\">Active</Button>\\n  <Button disabled>Disabled</Button>\\n</Space>\\n\")), mdx(\"h3\", null, \"ButtonOutline\"), mdx(\"p\", null, \"Use an outline button alongside a default button to provide alternative actions on a page. Outline buttons should only appear alongside default buttons for secondary actions. Use no more than two secondary buttons on a page.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<ButtonOutline>Outline</ButtonOutline>\\n\")), mdx(\"h4\", null, \"Outline states\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Space>\\n  <ButtonOutline>Idle</ButtonOutline>\\n  <ButtonOutline className=\\\"hover\\\">Hover</ButtonOutline>\\n  <ButtonOutline className=\\\"active\\\">Active</ButtonOutline>\\n  <ButtonOutline color=\\\"critical\\\">Critical</ButtonOutline>\\n  <ButtonOutline disabled>Disabled</ButtonOutline>\\n</Space>\\n\")), mdx(\"h3\", null, \"ButtonTransparent\"), mdx(\"p\", null, \"Use a transparent button as a tertiary action on a screen, they are often used as a Cancel button on a form. Typically it performs the opposite action of a default button\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<ButtonTransparent>Transparent</ButtonTransparent>\\n\")), mdx(\"h4\", null, \"Transparent states\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Space>\\n  <ButtonTransparent>Idle</ButtonTransparent>\\n  <ButtonTransparent className=\\\"hover\\\">Hover</ButtonTransparent>\\n  <ButtonTransparent className=\\\"active\\\">Active</ButtonTransparent>\\n  <ButtonTransparent color=\\\"critical\\\">Critical</ButtonTransparent>\\n  <ButtonTransparent disabled>Disabled</ButtonTransparent>\\n</Space>\\n\")), mdx(\"h2\", null, \"Colors\"), mdx(\"h3\", null, \"Critical\"), mdx(\"p\", null, \"Critical Buttons are to be used in situations where you need to convey some very important, potentially irreversible consequence of pressing this button.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Button color=\\\"critical\\\">Critical</Button>\\n\")), mdx(\"h4\", null, \"Critical States\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Space>\\n  <Button color=\\\"critical\\\">Critical Idle</Button>\\n  <Button color=\\\"critical\\\" className=\\\"hover\\\">\\n    Critical Hover\\n  </Button>\\n  <Button color=\\\"critical\\\" className=\\\"active\\\">\\n    Critical Active\\n  </Button>\\n  <Button color=\\\"critical\\\" disabled>\\n    Critical Disabled\\n  </Button>\\n</Space>\\n\")), mdx(\"h2\", null, \"Size\"), mdx(\"p\", null, \"Use the size property on a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Button />\"), \" to modify the size the button rendered. You can combine it with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mode\"), \" property to get the correct style and size of button you need.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Space>\\n  <Button size=\\\"xsmall\\\">Xsmall Button</Button>\\n  <Button size=\\\"small\\\">Small Button</Button>\\n  <Button>Medium (default) Button</Button>\\n  <Button size=\\\"large\\\">Large Button</Button>\\n</Space>\\n\")), mdx(\"h2\", null, \"Full Width\"), mdx(\"p\", null, \"Use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fullWidth\"), \" property on a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Button />\"), \" and it will set its width to 100%.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Button fullWidth>Full Width</Button>\\n\")), mdx(\"h2\", null, \"Disabled\"), mdx(\"p\", null, \"Use a disabled button to indicate to the user what action will be possible on a page once a prerequisite action is taken. Disabled buttons do not respond to user interaction.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Button disabled>I am disabled</Button>\\n\")), mdx(\"h2\", null, \"Button with an Icon\"), mdx(\"p\", null, \"Buttons can have an icon before or after their content, using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"iconBefore\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"iconAfter\"), \" property. Each property accepts the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/#!/Icons\"\n  }), \"name of an icon\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Space>\\n  <Button iconBefore=\\\"CircleAdd\\\">Add To Cart</Button>\\n  <Button iconAfter=\\\"Trash\\\" color=\\\"critical\\\">\\n    Delete\\n  </Button>\\n</Space>\\n\")), mdx(\"h2\", null, \"Additional Action Considerations\"), mdx(\"p\", null, \"When a call to action requires additional steps, include an ellipsis at the end of the button text as a visual clue. This helps reinforce that there are additional steps that can take place before the action takes effect.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Space>\\n  <Button color=\\\"critical\\\">Move to Trash...</Button>\\n  <Button>Print...</Button>\\n</Space>\\n\")), mdx(\"h2\", null, \"Extending Button\"), mdx(\"p\", null, \"Sometimes you may want to extend the Button defaults to create a specific styling effect. That should be straightforward by wrapped a StyledComponent in another \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"styled\"), \" call to extend it like so:\"), mdx(RoundBtn, {\n    mdxType: \"RoundBtn\"\n  }), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"static\",\n    \"static\": true\n  }), \"const RoundButton = styled(Button)`\\n  border-radius: 2rem;\\n`\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"figma":"file/Dirjx0RKbOOrLacqHq61By/Button-%26-Links?node-id=914%3A981&viewport=1741%2C951%2C1","github":"Button/Button.tsx","propsOf":"Button","status":"stable","title":"Button"},"tableOfContents":{"items":[{"url":"#colors","title":"Colors"},{"url":"#size","title":"Size"},{"url":"#full-width","title":"Full Width"},{"url":"#disabled","title":"Disabled"},{"url":"#button-with-an-icon","title":"Button with an Icon"},{"url":"#additional-action-considerations","title":"Additional Action Considerations"},{"url":"#extending-button","title":"Extending Button"}]}}},"pageContext":{"id":"4f355b86-f9db-5b71-b37f-df705b76d770"}}}