{"componentChunkName":"component---src-layout-documentation-tsx","path":"/components/actions/button-group/","result":{"data":{"site":{"siteMetadata":{"title":"Looker UI Components"}},"mdx":{"id":"336e6252-ac37-54eb-b213-5e75eede9125","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"ButtonGroup & ButtonToggle\",\n  \"figma\": \"file/Ut0DDG4hiuRG1HiZrC5Zyf/Dashboards-Next-Components?node-id=529%3A776\",\n  \"github\": \"Button/ButtonGroup.tsx\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"ButtonGroup\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<ButtonGroup />\"), \" behaves as a checkbox group. Use this when the user may select zero or more of a small set of options.\"), mdx(\"h3\", null, \"Controlled\"), mdx(\"p\", null, \"Control externally via \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"value\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onChange\"), \" props. On individual \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ButtonItem\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"value\"), \" is optional and will fall back to the text if absent.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \";() => {\\n  const [value, setValue] = useState(['CA'])\\n  return (\\n    <>\\n      <ButtonGroup value={value} onChange={setValue}>\\n        <ButtonItem value=\\\"CA\\\">California</ButtonItem>\\n        <ButtonItem value=\\\"AK\\\">Alaska</ButtonItem>\\n        <ButtonItem value=\\\"UT\\\">Utah</ButtonItem>\\n      </ButtonGroup>\\n      <Text pl=\\\"small\\\">Current selection: {value.join(', ')}</Text>\\n    </>\\n  )\\n}\\n\")), mdx(\"h3\", null, \"Uncontrolled\"), mdx(\"p\", null, \"Use uncontrolled when you want to get the value by inspecting the underlying checkbox inputs \\u2013 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"name\"), \" prop is recommended.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<ButtonGroup name=\\\"numbers\\\">\\n  <ButtonItem selected>Three</ButtonItem>\\n  <ButtonItem>Four</ButtonItem>\\n</ButtonGroup>\\n\")), mdx(\"h2\", null, \"ButtonToggle\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<ButtonToggle />\"), \" behaves as radio button group. Use this when the user may select only one of a small set of options.\"), mdx(\"h3\", null, \"Controlled\"), mdx(\"p\", null, \"Control externally via \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"value\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onChange\"), \" props. On individual \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ButtonItem\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"value\"), \" is optional and will fall back to the text if absent.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \";() => {\\n  const [value, setValue] = useState('TypeScript')\\n  return (\\n    <>\\n      <ButtonToggle value={value} onChange={setValue}>\\n        <ButtonItem>Ruby</ButtonItem>\\n        <ButtonItem>TypeScript</ButtonItem>\\n        <ButtonItem>Python</ButtonItem>\\n      </ButtonToggle>\\n      <Text pl=\\\"small\\\">Current selection: {value}</Text>\\n    </>\\n  )\\n}\\n\")), mdx(\"h3\", null, \"Uncontrolled\"), mdx(\"p\", null, \"Use uncontrolled when you want to get the value by inspecting the underlying radio button inputs \\u2013 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"name\"), \" prop is recommended.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<ButtonToggle name=\\\"fruits\\\">\\n  <ButtonItem selected>Apples</ButtonItem>\\n  <ButtonItem>Oranges</ButtonItem>\\n  <ButtonItem>Bananas</ButtonItem>\\n</ButtonToggle>\\n\")), mdx(\"h3\", null, \"Nullable\"), mdx(\"p\", null, \"Use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nullable\"), \" if the user should be able to click the selected item to de-select it.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<ButtonToggle name=\\\"fruits\\\" nullable>\\n  <ButtonItem>Apples</ButtonItem>\\n  <ButtonItem>Oranges</ButtonItem>\\n  <ButtonItem>Bananas</ButtonItem>\\n</ButtonToggle>\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"figma":"file/Ut0DDG4hiuRG1HiZrC5Zyf/Dashboards-Next-Components?node-id=529%3A776","github":"Button/ButtonGroup.tsx","propsOf":null,"status":null,"title":"ButtonGroup & ButtonToggle"},"tableOfContents":{"items":[{"url":"#buttongroup","title":"ButtonGroup"},{"url":"#buttontoggle","title":"ButtonToggle"}]}}},"pageContext":{"id":"336e6252-ac37-54eb-b213-5e75eede9125"}}}