{"componentChunkName":"component---src-layout-documentation-tsx","path":"/components/forms/slider/","result":{"data":{"site":{"siteMetadata":{"title":"Looker UI Components"}},"mdx":{"id":"590a7ff7-6ebd-5116-ac48-23d2f76a1b64","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Slider\",\n  \"propsOf\": \"Slider\",\n  \"github\": \"Form/Inputs/Slider/Slider.tsx\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Default Slider\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Slider />\"), \" component renders a styled range slider on the page, with no accompanying label.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Slider />\\n\")), mdx(\"h1\", null, \"Value, Min, Max\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Slider />\"), \" component accepts a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"value\"), \" property, allowing the user to set the initial value at which the slider is initialized.\\nIt also accepts \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"min\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"max\"), \" values.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Slider min={10} max={20} value={15} />\\n\")), mdx(\"p\", null, \"Min and max default to the following values:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"min\"), \": 0\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"max\"), \": 10\")), mdx(\"p\", null, \"The slider component will disregard any value prop that goes outside of the defined min or max. The following example illustrates default settings when \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"max=10\"), \" but \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"value=5000\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Slider min={0} max={10} value={5000} />\\n\")), mdx(\"h1\", null, \"Controlled component with an onChange callback\"), mdx(\"p\", null, \"If you'd like to read and control the input value externally, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Slider\"), \" accepts an onChange event callback.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \";() => {\\n  const [sliderValue, setSliderValue] = useState(0)\\n  const onChange = (event) => {\\n    setSliderValue(event.target.value)\\n  }\\n  return (\\n    <div>\\n      <Slider onChange={onChange} value={sliderValue} />\\n      <Heading>\\n        <strong>Value:</strong> {sliderValue}\\n      </Heading>\\n    </div>\\n  )\\n}\\n\")), mdx(\"h1\", null, \"Sizes\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Slider\"), \" comes in three sizes, which can be specified in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"size\"), \" prop:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Slider size=\\\"small\\\" value={4} />\\n<Slider size=\\\"medium\\\" value={6} />\\n<Slider size=\\\"large\\\" value={8} />\\n\")), mdx(\"h1\", null, \"Step\"), mdx(\"p\", null, \"Just like the standard HTML range input, you change the granularity of slider options by using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"step\"), \" prop.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Slider max={10000} step={2500} />\\n\")), mdx(\"h1\", null, \"Accessibility\"), mdx(\"p\", null, \"Slider accepts the standard aria-labelledby to help screen readers associate the range input with the relevant form label.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<label id=\\\"slider-label\\\">Slider:</label>\\n<Slider aria-labelledby=\\\"slider-label\\\" />\\n\")), mdx(\"h1\", null, \"Disabled\"), mdx(\"p\", null, \"Use the disable property to gray out the Input, making it a fixed value.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Slider value={3} disabled />\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"figma":null,"github":"Form/Inputs/Slider/Slider.tsx","propsOf":"Slider","status":null,"title":"Slider"},"tableOfContents":{"items":[{"url":"#default-slider","title":"Default Slider"},{"url":"#value-min-max","title":"Value, Min, Max"},{"url":"#controlled-component-with-an-onchange-callback","title":"Controlled component with an onChange callback"},{"url":"#sizes","title":"Sizes"},{"url":"#step","title":"Step"},{"url":"#accessibility","title":"Accessibility"},{"url":"#disabled","title":"Disabled"}]}}},"pageContext":{"id":"590a7ff7-6ebd-5116-ac48-23d2f76a1b64"}}}