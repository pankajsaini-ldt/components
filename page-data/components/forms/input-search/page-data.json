{"componentChunkName":"component---src-layout-documentation-tsx","path":"/components/forms/input-search/","result":{"data":{"site":{"siteMetadata":{"title":"Looker UI Components"}},"mdx":{"id":"5af3e407-b646-5b15-9e15-201c282dbdfe","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"InputSearch\",\n  \"github\": \"Form/Inputs/InputSearch/InputSearch.tsx\",\n  \"propsOf\": \"InputSearch\",\n  \"figma\": \"file/2MG6DoSjk4IaLnjjFCnKFf/Forms\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<InputSearch />\"), \" component renders a single search input element. You can add a placeholder, and a starter value, also a summary text and a closing button associated with it. To remove the button and summary use the hideControls option. If you are building a menu you probably want to use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<MenuSearch />\"), \". If you don't want to see the search \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Icon\"), \" use the prop \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"hideSearchIcon\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<InputSearch placeholder=\\\"Type your search\\\" />\\n<Divider my=\\\"medium\\\" />\\n<InputSearch placeholder=\\\"Type your search\\\" value=\\\"test search\\\" />\\n<Divider my=\\\"medium\\\"/>\\n<InputSearch\\n  width=\\\"50%\\\"\\n  placeholder=\\\"Type your search\\\"\\n  value=\\\"test search 0\\\"\\n  summary={'some text'}\\n/>\\n<Divider my=\\\"medium\\\" />\\n<InputSearch\\n  placeholder=\\\"Type your search\\\"\\n  value=\\\"test search 1\\\"\\n  hideControls\\n/>\\n<Divider my=\\\"medium\\\"/>\\n<InputSearch hideSearchIcon placeholder=\\\"No search icon here\\\" />\\n\\n\")), mdx(\"h2\", null, \"Controlled Example\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \";() => {\\n  const ExampleInputSearch = ({\\n    value = '',\\n    hideControls,\\n    searchResults = [],\\n  }) => {\\n    const [keywords, setKeywords] = React.useState(value)\\n    const onChange = (e) => {\\n      setKeywords(e.currentTarget.value)\\n    }\\n    return (\\n      <InputSearch\\n        placeholder=\\\"Type your search\\\"\\n        summary={\\n          keywords.length > 0 && `You typed ${keywords.length} characters`\\n        }\\n        value={keywords}\\n        onChange={onChange}\\n        hideControls={hideControls}\\n      />\\n    )\\n  }\\n  return (\\n    <>\\n      <ExampleInputSearch />\\n      <Divider my=\\\"medium\\\" />\\n      <ExampleInputSearch value=\\\"test search 2\\\" />\\n      <Divider my=\\\"medium\\\" />\\n      <ExampleInputSearch value=\\\"test search 3\\\" hideControls />\\n    </>\\n  )\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"figma":"file/2MG6DoSjk4IaLnjjFCnKFf/Forms","github":"Form/Inputs/InputSearch/InputSearch.tsx","propsOf":"InputSearch","status":null,"title":"InputSearch"},"tableOfContents":{"items":[{"url":"#controlled-example","title":"Controlled Example"}]}}},"pageContext":{"id":"5af3e407-b646-5b15-9e15-201c282dbdfe"}}}