{"componentChunkName":"component---src-layout-documentation-tsx","path":"/components/forms/input-time/","result":{"data":{"site":{"siteMetadata":{"title":"Looker UI Components"}},"mdx":{"id":"8c7457fa-6fb8-5f29-b95d-3845a1248cc9","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"InputTime\",\n  \"propsOf\": \"InputTime\",\n  \"github\": \"Form/Inputs/InputTime/InputTime.tsx\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"InputTime\"), \" provides a themable HTML5-equivalent time picking experience.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"<InputTime />\\n\")), mdx(\"h2\", null, \"12 And 24 Hour Format\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"InputTime\"), \" can display either a 12-hour or 24-hour time selecting interface. If not specified, it defaults to 12-hour time.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"<Space>\\n  <InputTime format=\\\"12h\\\" defaultValue=\\\"14:34\\\" />\\n  <InputTime format=\\\"24h\\\" defaultValue=\\\"14:34\\\" />\\n</Space>\\n\")), mdx(\"h2\", null, \"Controlled Component\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"InputTime\"), \" accepts a value and onChange listener for the standard controlled component pattern.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \";() => {\\n  const [value, setValue] = useState('12:00')\\n  const handle1400Click = () => setValue('14:00')\\n  const handle1515Click = () => setValue('15:15')\\n  const handle1632Click = () => setValue('16:32')\\n\\n  return (\\n    <Space>\\n      <Button onClick={handle1400Click}>2:00pm</Button>\\n      <Button onClick={handle1515Click}>3:15pm</Button>\\n      <Button onClick={handle1632Click}>4:32pm</Button>\\n      <InputTime value={value} />\\n      <span>Selected: {value}</span>\\n    </Space>\\n  )\\n}\\n\")), mdx(\"h2\", null, \"defaultValue\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"InputTime\"), \" also accetpts a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"defaultValue\"), \" prop if you don't want to control component value externally.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"<InputTime defaultValue=\\\"14:34\\\" />\\n\")), mdx(\"h2\", null, \"disabled\"), mdx(\"p\", null, \"Use the disable property to make an input field uneditable.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"<InputTime disabled />\\n\")), mdx(\"h2\", null, \"readOnly\"), mdx(\"p\", null, \"As the name suggests, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"readOnly\"), \" makes the text uneditable.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"<InputTime defaultValue=\\\"10:01\\\" readOnly />\\n\")), mdx(\"h2\", null, \"ID & Form Labels\"), mdx(\"p\", null, \"You can combine the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"id\"), \" prop with form label, so that when the label is clicked it will focus on the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"hour\"), \" input.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"<Space>\\n  <Label htmlFor=\\\"demo-id\\\">Label Text</Label>\\n  <InputTime id=\\\"demo-id\\\" />\\n</Space>\\n\")), mdx(\"h2\", null, \"Focus & Blur\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onFocus\"), \" callback will fire when any of the three sub-fields (hour, minute, period) are focused. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onBlur\"), \" fires when the focus moves outside the component entirely.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \";() => {\\n  const [isFocused, setIsFocused] = useState(false)\\n  const handleFocus = () => setIsFocused(true)\\n  const handleBlur = () => setIsFocused(false)\\n\\n  return (\\n    <Space>\\n      <InputTime onFocus={handleFocus} onBlur={handleBlur} />\\n      {isFocused && <Text color=\\\"green\\\">FOCUSED!!</Text>}\\n    </Space>\\n  )\\n}\\n\")), mdx(\"h2\", null, \"Validation Error State\"), mdx(\"p\", null, \"You can render a failed validation state with the prop \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"validationType=\\\"error\\\"\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"<InputTime validationType=\\\"error\\\" />\\n\")), mdx(\"h2\", null, \"onValidationFail\"), mdx(\"p\", null, \"In addition, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"InputTime\"), \" will automatically check whether the provided \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"value\"), \" prop is actually a valid 24 hour time string, and fire the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onValidationFail\"), \" callback.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \";() => {\\n  const [validationType, setValidationType] = useState()\\n  const value = 'Stardate 2004.14'\\n  const handleValidationFail = () => {\\n    setValidationType('error')\\n  }\\n  return (\\n    <Space>\\n      <InputTime\\n        validationType={validationType}\\n        value={value}\\n        onValidationFail={handleValidationFail}\\n      />\\n      {validationType === 'error' && (\\n        <Text variant=\\\"critical\\\">\\n          Error: <Code fontSize=\\\"small\\\">{value}</Code> is not a valid 24-hour\\n          time string\\n        </Text>\\n      )}\\n    </Space>\\n  )\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"figma":null,"github":"Form/Inputs/InputTime/InputTime.tsx","propsOf":"InputTime","status":null,"title":"InputTime"},"tableOfContents":{"items":[{"url":"#12-and-24-hour-format","title":"12 And 24 Hour Format"},{"url":"#controlled-component","title":"Controlled Component"},{"url":"#defaultvalue","title":"defaultValue"},{"url":"#disabled","title":"disabled"},{"url":"#readonly","title":"readOnly"},{"url":"#id--form-labels","title":"ID & Form Labels"},{"url":"#focus--blur","title":"Focus & Blur"},{"url":"#validation-error-state","title":"Validation Error State"},{"url":"#onvalidationfail","title":"onValidationFail"}]}}},"pageContext":{"id":"8c7457fa-6fb8-5f29-b95d-3845a1248cc9"}}}