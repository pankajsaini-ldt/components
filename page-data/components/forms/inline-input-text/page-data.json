{"componentChunkName":"component---src-layout-documentation-tsx","path":"/components/forms/inline-input-text/","result":{"data":{"site":{"siteMetadata":{"title":"Looker UI Components"}},"mdx":{"id":"52acdbc9-4ecb-5e18-a88e-a5c4c2be093a","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"InlineInputText\",\n  \"propsOf\": \"InlineInputText\",\n  \"github\": \"InlineInputText/InlineInputText.tsx\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"InlineInputText\"), mdx(\"p\", null, \"Input styled to have underline follow the input.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Flex alignItems=\\\"center\\\" justifyContent=\\\"space-around\\\">\\n  <Heading>\\n    <InlineInputText value=\\\"Type here...\\\" />\\n  </Heading>\\n  <Paragraph variant=\\\"subdued\\\">\\n    <InlineInputText placeholder=\\\"Type here...\\\" />\\n  </Paragraph>\\n</Flex>\\n\")), mdx(\"p\", null, \"Using the prop \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"simple\"), \" the input won't be as visible until hover or focus\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<InlineInputText simple value=\\\"Type here...\\\" />\\n\")), mdx(\"p\", null, \"Using external value.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \";() => {\\n  const [value, setValue] = React.useState('Type here...')\\n  const onChange = (e) => {\\n    setValue(e.currentTarget.value)\\n  }\\n  const onClick = (e) => {\\n    setValue('You clicked the button')\\n  }\\n  return (\\n    <Flex alignItems=\\\"center\\\" justifyContent=\\\"space-around\\\">\\n      <InlineInputText value={value} onChange={onChange} />\\n      <Button onClick={onClick}>Click Me</Button>\\n    </Flex>\\n  )\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"figma":null,"github":"InlineInputText/InlineInputText.tsx","propsOf":"InlineInputText","status":null,"title":"InlineInputText"},"tableOfContents":{"items":[{"url":"#inlineinputtext","title":"InlineInputText"}]}}},"pageContext":{"id":"52acdbc9-4ecb-5e18-a88e-a5c4c2be093a"}}}