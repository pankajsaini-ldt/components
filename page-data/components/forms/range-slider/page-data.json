{"componentChunkName":"component---src-layout-documentation-tsx","path":"/components/forms/range-slider/","result":{"data":{"site":{"siteMetadata":{"title":"Looker UI Components"}},"mdx":{"id":"b3ec6dfe-b7bf-5c1a-b918-de293336ebec","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"RangeSlider\",\n  \"propsOf\": \"RangeSlider\",\n  \"github\": \"Form/Inputs/RangeSlider/RangeSlider.tsx\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RangeSlider\"), \" is the 2-point alternative to the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/components/forms/slider\"\n  }), \"single-value \", mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"Slider\"), \" component\"), \".\"), mdx(\"h1\", null, \"Default RangeSlider\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<RangeSlider />\"), \" component renders a styled range slider on the page. It will render a range from 0 to 10, and select all possible values inbetween.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<CardContent>\\n  <RangeSlider />\\n</CardContent>\\n\")), mdx(\"h1\", null, \"Value and DefaultValue\"), mdx(\"p\", null, \"By default, this component will select the entire range from Min to Max values. You can control the selected range by passing an array of integers to either \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"value\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"defaultValue\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<CardContent>\\n  <RangeSlider defaultValue={[3, 8]} />\\n  <RangeSlider value={[3, 8]} />\\n</CardContent>\\n\")), mdx(\"p\", null, \"Like all standard form elements, you cannot interact with this component if you pass in a value without an onChange handler.\"), mdx(\"h1\", null, \"Min, Max\"), mdx(\"p\", null, \"You can customize \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"min\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"max\"), \" values.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<CardContent>\\n  <RangeSlider min={10} max={20} defaultValue={[13, 17]} />\\n</CardContent>\\n\")), mdx(\"p\", null, \"Min and max default to the following values:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"min\"), \": 0\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"max\"), \": 10\")), mdx(\"p\", null, \"The slider component will disregard any value prop that goes outside of the defined min or max range. The following example illustrates passing a value that falls outside the acceptable range.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<CardContent>\\n  <RangeSlider min={100} max={200} defaultValue={[0, 5000]} />\\n</CardContent>\\n\")), mdx(\"h1\", null, \"Controlled component with an onChange callback\"), mdx(\"p\", null, \"If you'd like to read and control the input value externally, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Slider\"), \" accepts an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onChange\"), \" event callback along with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"value\"), \" prop.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \";() => {\\n  const [sliderValue, setSliderValue] = useState([3, 7])\\n  return (\\n    <>\\n      <Heading>\\n        <strong>Value:</strong> {sliderValue[0]} &mdash; {sliderValue[1]}\\n      </Heading>\\n      <RangeSlider onChange={setSliderValue} value={sliderValue} />\\n      <Space>\\n        <Button onClick={() => setSliderValue([0, 10])}>0 &mdash; 10</Button>\\n        <Button onClick={() => setSliderValue([2, 8])}>2 &mdash; 8</Button>\\n        <Button onClick={() => setSliderValue([4, 6])}>4 &mdash; 6</Button>\\n      </Space>\\n    </>\\n  )\\n}\\n\")), mdx(\"h1\", null, \"Step\"), mdx(\"p\", null, \"You change the granularity of the slider options by using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"step\"), \" prop.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<CardContent>\\n  <RangeSlider max={10000} step={2500} />\\n</CardContent>\\n\")), mdx(\"h1\", null, \"Accessibility\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RangeSlider\"), \" accepts the standard aria-labelledby to help screen readers associate the range input with the relevant form label.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<CardContent>\\n  <label id=\\\"slider-label\\\">Slider:</label>\\n  <RangeSlider aria-labelledby=\\\"slider-label\\\" />\\n</CardContent>\\n\")), mdx(\"h1\", null, \"readOnly\"), mdx(\"p\", null, \"Use the readOnly property to render the component normally, but prevent user interaction.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<CardContent>\\n  <RangeSlider defaultValue={[2, 3]} readOnly />\\n</CardContent>\\n\")), mdx(\"h1\", null, \"Disabled\"), mdx(\"p\", null, \"Use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"disabled\"), \" property to gray out the Input, making it a fixed value.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<CardContent>\\n  <RangeSlider defaultValue={[2, 3]} disabled />\\n</CardContent>\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"figma":null,"github":"Form/Inputs/RangeSlider/RangeSlider.tsx","propsOf":"RangeSlider","status":null,"title":"RangeSlider"},"tableOfContents":{"items":[{"url":"#default-rangeslider","title":"Default RangeSlider"},{"url":"#value-and-defaultvalue","title":"Value and DefaultValue"},{"url":"#min-max","title":"Min, Max"},{"url":"#controlled-component-with-an-onchange-callback","title":"Controlled component with an onChange callback"},{"url":"#step","title":"Step"},{"url":"#accessibility","title":"Accessibility"},{"url":"#readonly","title":"readOnly"},{"url":"#disabled","title":"Disabled"}]}}},"pageContext":{"id":"b3ec6dfe-b7bf-5c1a-b918-de293336ebec"}}}