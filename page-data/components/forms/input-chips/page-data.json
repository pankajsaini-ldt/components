{"componentChunkName":"component---src-layout-documentation-tsx","path":"/components/forms/input-chips/","result":{"data":{"site":{"siteMetadata":{"title":"Looker UI Components"}},"mdx":{"id":"c0987e45-0004-52b7-872e-8900be60ad65","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"InputChips\",\n  \"github\": \"Form/Inputs/InputChips/InputChips.tsx\",\n  \"propsOf\": \"InputChips\",\n  \"figma\": \"file/2MG6DoSjk4IaLnjjFCnKFf/Forms\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"InputChips\"), \" component takes an array of strings (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"values\"), \") and renders them each as a\\ndeletable \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/components/content/chip\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"Chip\")), \" inside a text box.\\nThe input value is converted to chip values as the user types via the \", mdx(\"strong\", null, \"comma\"), \" or \", mdx(\"strong\", null, \"enter\"), \" keys, or on blur.\\nThe \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"values\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onChange\"), \" props are required \\u2013 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"InputChips\"), \" is a controlled component.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"InputChips\"), \" also supports \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"summary\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"hideControls\"), \", similar to \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"input-search\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"InputSearch\")), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \";() => {\\n  function ExampleInputChips({ values: initialValues = [], hideControls }) {\\n    const [values, setValues] = React.useState(initialValues)\\n    function handleChange(newValues) {\\n      setValues(newValues)\\n    }\\n    return (\\n      <InputChips\\n        placeholder=\\\"Enter multiple values\\\"\\n        summary={values.length > 0 && `You've entered ${values.length} items`}\\n        values={values}\\n        onChange={handleChange}\\n        hideControls={hideControls}\\n      />\\n    )\\n  }\\n  return (\\n    <>\\n      <ExampleInputChips />\\n      <Divider my=\\\"medium\\\" />\\n      <ExampleInputChips values={['mango', 'kiwi']} />\\n      <Divider my=\\\"medium\\\" />\\n      <ExampleInputChips values={[]} hideControls />\\n    </>\\n  )\\n}\\n\")), mdx(\"h2\", null, \"Controlled Input Value\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"inputValue\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onInputChange\"), \" props allow control of the typed value. We also provide an optional \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onClear\"), \" event hook that can be used for post-event cleanup or rendering helpful undo functionality.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \";() => {\\n  const [values, setValues] = React.useState([])\\n  const previousInputValues = usePreviousValue(values)\\n  const [inputValue, setInputValue] = React.useState('')\\n  const [renderUndoButton, setRenderUndoButton] = React.useState(false)\\n  function handleChange(newValues) {\\n    setValues(newValues)\\n    setRenderUndoButton(false)\\n  }\\n  function handleInputChange(newValue) {\\n    setInputValue(newValue)\\n  }\\n  function handleClear() {\\n    setRenderUndoButton(true)\\n  }\\n  function handleUndo() {\\n    setValues(previousInputValues)\\n    setRenderUndoButton(false)\\n  }\\n  return (\\n    <>\\n      <InputChips\\n        placeholder=\\\"Enter multiple values\\\"\\n        summary={values.length > 0 && `You've entered ${values.length} items`}\\n        values={values}\\n        inputValue={inputValue}\\n        onChange={handleChange}\\n        onInputChange={handleInputChange}\\n        onClear={handleClear}\\n        mb=\\\"small\\\"\\n      />\\n      {renderUndoButton && (\\n        <>\\n          You cleared the values! <Button onClick={handleUndo}>Undo</Button>\\n        </>\\n      )}\\n      {inputValue !== '' && (\\n        <Paragraph>\\n          You are typing: <strong>{inputValue}</strong>\\n        </Paragraph>\\n      )}\\n    </>\\n  )\\n}\\n\")), mdx(\"h2\", null, \"Validation\"), mdx(\"p\", null, \"If a duplicate value is entered, it will not be added to the values list.\\nThe optional \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"validate\"), \" prop is a function returning a boolean that is called for each value that is entered.\\nIf it returns false, the value is not added. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onValidationFail\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onDuplicate\"), \" are optional handlers for when\\ninvalid and duplicate values are entered.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \";() => {\\n  const emailValidator = new RegExp(\\n    /^(([^<>()\\\\[\\\\]\\\\\\\\.,:\\\\s@\\\"]+(\\\\.[^<>()\\\\[\\\\]\\\\\\\\.,:\\\\s@\\\"]+)*)|(\\\".+\\\"))@((\\\\[[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}])|(([a-zA-Z\\\\-0-9]+\\\\.)+[a-zA-Z]{2,}))$/\\n  )\\n  const [values, setValues] = React.useState([])\\n  const [invalidValue, setInvalidValue] = React.useState('')\\n  const [duplicateValue, setDuplicateValue] = React.useState('')\\n\\n  function handleChange(newValues) {\\n    setValues(newValues)\\n    setInvalidValue('')\\n    setDuplicateValue('')\\n  }\\n  function validate(valueToValidate) {\\n    return emailValidator.test(valueToValidate)\\n  }\\n  function handleInvalid(invalidValue) {\\n    setInvalidValue(invalidValue)\\n  }\\n  function handleDuplicate(duplicateValue) {\\n    setDuplicateValue(duplicateValue)\\n  }\\n  return (\\n    <>\\n      <InputChips\\n        placeholder=\\\"Enter email addresses\\\"\\n        values={values}\\n        validate={validate}\\n        onChange={handleChange}\\n        onValidationFail={handleInvalid}\\n        onDuplicate={handleDuplicate}\\n        mb=\\\"small\\\"\\n      />\\n      <Paragraph>\\n        {invalidValue !== ''\\n          ? `You entered an invalid email: ${invalidValue}`\\n          : duplicateValue !== ''\\n          ? `${duplicateValue} has already been entered`\\n          : ''}\\n      </Paragraph>\\n    </>\\n  )\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"figma":"file/2MG6DoSjk4IaLnjjFCnKFf/Forms","github":"Form/Inputs/InputChips/InputChips.tsx","propsOf":"InputChips","status":null,"title":"InputChips"},"tableOfContents":{"items":[{"url":"#controlled-input-value","title":"Controlled Input Value"},{"url":"#validation","title":"Validation"}]}}},"pageContext":{"id":"c0987e45-0004-52b7-872e-8900be60ad65"}}}