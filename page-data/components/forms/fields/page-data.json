{"componentChunkName":"component---src-layout-documentation-tsx","path":"/components/forms/fields/","result":{"data":{"site":{"siteMetadata":{"title":"Looker UI Components"}},"mdx":{"id":"fbc4e139-8070-5d8e-a484-cccb9cbd274d","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Fields\",\n  \"figma\": \"file/2MG6DoSjk4IaLnjjFCnKFf/Forms\",\n  \"github\": \"Form/Fields\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"FieldCheckbox\"), mdx(Props, {\n    of: \"FieldCheckbox\",\n    mdxType: \"Props\"\n  }), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<FieldCheckbox />\"), \" component is composed of a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Checkbox />\"), \" component and a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Label />\"), \" component. Using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<FieldCheckbox />\"), \" allows for rendering validation messages.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<FieldCheckbox name=\\\"box\\\" label=\\\"Box\\\" />\\n<FieldCheckbox name=\\\"requiredField\\\" label=\\\"A required field\\\" required />\\n<FieldCheckbox\\n  name=\\\"normal-label\\\"\\n  label=\\\"Normal Label\\\"\\n  labelFontWeight=\\\"normal\\\"\\n/>\\n\")), mdx(\"h3\", null, \"FieldCheckbox Validation\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<FieldCheckbox />\"), \" components accepts \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"validationMessage\"), \" as a property. This is an object with properties \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"type\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"message\"), \".\"), mdx(\"p\", null, \"See \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ValidationMessage\"), \" \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/#!/ValidationMessage\"\n  }), \"here\")), mdx(\"p\", null, \"If you have multiple fields in need of validation, it is recommended that you wrap them in a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Form />\"), \" component and pass to it a dictionary with key as field name and value as a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ValidationMessage\"), \".\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"alignValidationMessage\"), \" can also be used to adjust where the validation message appears in relation to the input field. By default, it will render to the right, which is the best practice in most cases.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"em\", {\n    parentName: \"strong\"\n  }, \"Note: In the current implementation, any \", mdx(\"inlineCode\", {\n    parentName: \"em\"\n  }, \"ValidationMessage\"), \" set in a \", mdx(\"inlineCode\", {\n    parentName: \"em\"\n  }, \"<FieldCheckbox />\"), \" component will be overridden by \", mdx(\"inlineCode\", {\n    parentName: \"em\"\n  }, \"ValidationMessages\"), \" set in the parent \", mdx(\"inlineCode\", {\n    parentName: \"em\"\n  }, \"<Form />\"), \" component. Because of this, it is highly recommended that you only ever directly set \", mdx(\"inlineCode\", {\n    parentName: \"em\"\n  }, \"ValidationMessage\"), \" if a \", mdx(\"inlineCode\", {\n    parentName: \"em\"\n  }, \"<FieldCheckbox />\"), \" is outside a \", mdx(\"inlineCode\", {\n    parentName: \"em\"\n  }, \"<Form />\"), \".\"))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<FieldCheckbox\\n  name=\\\"someBox\\\"\\n  label=\\\"Some Box\\\"\\n  validationMessage={{ type: 'error', message: 'This is an error' }}\\n/>\\n\")), mdx(\"h3\", null, \"FieldCheckboxGroup\"), mdx(\"p\", null, \"Groups of checkboxes can be displayed with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"FieldCheckboxGroup\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \";() => {\\n  const options = [\\n    {\\n      label: 'Cheddar',\\n      value: 'cheddar',\\n    },\\n    {\\n      label: 'Gouda',\\n      value: 'gouda',\\n    },\\n  ]\\n\\n  const optionsDisabled = [\\n    {\\n      label: 'Cheddar',\\n      value: 'cheddar',\\n    },\\n    {\\n      disabled: true,\\n      label: 'Gouda',\\n      value: 'gouda',\\n    },\\n  ]\\n\\n  return (\\n    <Grid m=\\\"xxlarge\\\">\\n      <FieldCheckboxGroup\\n        defaultValue={['cheddar']}\\n        description=\\\"defaultValue checked\\\"\\n        label=\\\"Cheeses default layout\\\"\\n        name=\\\"group1\\\"\\n        options={options}\\n      />\\n      <FieldCheckboxGroup\\n        defaultValue={['cheddar']}\\n        description=\\\"defaultValue checked\\\"\\n        inline\\n        label=\\\"Cheeses inline layout\\\"\\n        name=\\\"group1\\\"\\n        options={options}\\n      />\\n      <FieldCheckboxGroup\\n        description=\\\"Validation message and requited\\\"\\n        label=\\\"Cheeses default layout\\\"\\n        name=\\\"group1\\\"\\n        options={options}\\n        required\\n        validationMessage={{\\n          message: 'Select at least 1 cheese',\\n          type: 'error',\\n        }}\\n      />\\n      <FieldCheckboxGroup\\n        description=\\\"Validation message and requited\\\"\\n        inline\\n        label=\\\"Cheeses inline layout\\\"\\n        name=\\\"group1\\\"\\n        options={options}\\n        required\\n        validationMessage={{\\n          message: 'Select at least 1 cheese',\\n          type: 'error',\\n        }}\\n      />\\n      <FieldCheckboxGroup\\n        description=\\\"everything is disabled\\\"\\n        disabled\\n        label=\\\"Cheeses default layout\\\"\\n        name=\\\"group1\\\"\\n        options={options}\\n      />\\n      <FieldCheckboxGroup\\n        description=\\\"everything is disabled\\\"\\n        disabled\\n        inline\\n        name=\\\"group1\\\"\\n        label=\\\"Cheeses inline layout\\\"\\n        options={options}\\n      />\\n      <FieldCheckboxGroup\\n        defaultValue={['gouda']}\\n        description=\\\"only one checkbox is disabled and defaultValue\\\"\\n        label=\\\"Cheeses default layout\\\"\\n        name=\\\"group1\\\"\\n        options={optionsDisabled}\\n      />\\n      <FieldCheckboxGroup\\n        defaultValue={['gouda']}\\n        description=\\\"only one checkbox is disabled and defaultValue\\\"\\n        inline\\n        name=\\\"group1\\\"\\n        label=\\\"Cheeses inline layout\\\"\\n        options={optionsDisabled}\\n      />\\n    </Grid>\\n  )\\n}\\n\")), mdx(\"h2\", null, \"FieldColor\"), mdx(Props, {\n    of: \"FieldColor\",\n    mdxType: \"Props\"\n  }), mdx(\"p\", null, \"This component is composed of a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"FieldText\"), \" and a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ColorWheel\"), \" that appears in a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Popover\"), \" upon click of the color swatch.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<FieldColor label=\\\"Pick a color\\\" alignLabel=\\\"left\\\" />\\n\")), mdx(\"h2\", null, \"FieldRadio\"), mdx(Props, {\n    of: \"FieldRadio\",\n    mdxType: \"Props\"\n  }), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<FieldRadio />\"), \" component is composed of a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Radio />\"), \" component and a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Label />\"), \" component. Using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<FieldRadio />\"), \" allows for rendering validation messages. By default, the label will render to the right of the radio button, however this is adjustable with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"alignLabel\"), \" property.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<FieldRadio name=\\\"radio\\\" label=\\\"Radio\\\" />\\n<FieldRadio name=\\\"radio\\\" label=\\\"Radio 2\\\" alignLabel=\\\"left\\\" />\\n<FieldRadio\\n  name=\\\"radio\\\"\\n  label=\\\"Radio 3\\\"\\n  labelFontWeight=\\\"normal\\\"\\n  alignLabel=\\\"right\\\"\\n/>\\n\")), mdx(\"h3\", null, \"FieldRadioGroup\"), mdx(\"p\", null, \"Groups of radios can be displayed with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"FieldRadioGroup\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \";() => {\\n  const options = [\\n    {\\n      label: 'Cheddar',\\n      value: 'cheddar',\\n    },\\n    {\\n      label: 'Gouda',\\n      value: 'gouda',\\n    },\\n  ]\\n\\n  const optionsDisabled = [\\n    {\\n      label: 'Cheddar',\\n      value: 'cheddar',\\n    },\\n    {\\n      disabled: true,\\n      label: 'Gouda',\\n      value: 'gouda',\\n    },\\n  ]\\n\\n  return (\\n    <Grid m=\\\"xxlarge\\\">\\n      <FieldRadioGroup\\n        description=\\\"default layout\\\"\\n        label=\\\"Cheeses\\\"\\n        name=\\\"group1\\\"\\n        options={options}\\n      />\\n      <FieldRadioGroup\\n        description=\\\" inline layout\\\"\\n        inline\\n        label=\\\"Cheeses\\\"\\n        name=\\\"group1\\\"\\n        options={options}\\n      />\\n      <FieldRadioGroup\\n        description=\\\"Validation message and requited\\\"\\n        label=\\\"Cheeses default layout\\\"\\n        name=\\\"group1\\\"\\n        options={options}\\n        required\\n        validationMessage={{\\n          message: 'Select at least 1 cheese',\\n          type: 'error',\\n        }}\\n      />\\n      <FieldRadioGroup\\n        description=\\\"Validation message and requited\\\"\\n        inline\\n        label=\\\"Cheeses inline layout\\\"\\n        name=\\\"group1\\\"\\n        options={options}\\n        required\\n        validationMessage={{\\n          message: 'Select at least 1 cheese',\\n          type: 'error',\\n        }}\\n      />\\n      <FieldRadioGroup\\n        description=\\\"everything is disabled\\\"\\n        disabled\\n        label=\\\"Cheeses default layout\\\"\\n        name=\\\"group1\\\"\\n        options={options}\\n      />\\n      <FieldRadioGroup\\n        description=\\\"everything is disabled\\\"\\n        disabled\\n        inline\\n        name=\\\"group1\\\"\\n        label=\\\"Cheeses inline layout\\\"\\n        options={options}\\n      />\\n      <FieldRadioGroup\\n        description=\\\"only one Radio is disabled\\\"\\n        label=\\\"Cheeses default layout\\\"\\n        name=\\\"group1\\\"\\n        options={optionsDisabled}\\n      />\\n      <FieldRadioGroup\\n        description=\\\"only one Radio is disabled\\\"\\n        inline\\n        name=\\\"group1\\\"\\n        label=\\\"Cheeses inline layout\\\"\\n        options={optionsDisabled}\\n      />\\n    </Grid>\\n  )\\n}\\n\")), mdx(\"h2\", null, \"FieldSelect\"), mdx(Props, {\n    of: \"FieldSelect\",\n    mdxType: \"Props\"\n  }), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<FieldSelect />\"), \" component is composed of an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Select />\"), \" component and a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Label />\"), \" component. Using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<FieldSelect />\"), \" allows for rendering validation messages. By default, the label will render directly above the input field, which is the recommended convention, however this is adjustable with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"alignLabel\"), \" property.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<FieldSelect\\n  name=\\\"Cheeses\\\"\\n  label=\\\"Cheeses\\\"\\n  defaultValue=\\\"cheddar\\\"\\n  options={[\\n    { value: 'cheddar', label: 'Cheddar' },\\n    { value: 'gouda', label: 'Gouda' },\\n    { value: 'swiss', label: 'Swiss' },\\n  ]}\\n/>\\n\")), mdx(\"h3\", null, \"FieldSelect Validation\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<FieldSelect />\"), \" component accepts \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"validationMessage\"), \" as a property. This is an object with properties \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"type\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"message\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<FieldSelect\\n  name=\\\"someField\\\"\\n  label=\\\"Some Field\\\"\\n  options={[\\n    { value: 'cheddar', label: 'Cheddar' },\\n    { value: 'gouda', label: 'Gouda' },\\n    { value: 'swiss', label: 'Swiss' },\\n  ]}\\n  validationMessage={{ type: 'error', message: 'This is an error' }}\\n  alignValidationMessage=\\\"right\\\"\\n/>\\n\")), mdx(\"p\", null, \"If you have multiple fields in need of validation, it is recommended that you wrap them in a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Form />\"), \" component and pass to it a dictionary with key as field name and value as a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ValidationMessage\"), \".\"), mdx(\"p\", null, \"Note: In the current implementation, any \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ValidationMessage\"), \" set in a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<FieldSelect />\"), \" component will be overridden by \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ValidationMessages\"), \" set in the parent \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Form />\"), \" component. Because of this, it is highly recommended that you only ever directly set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ValidationMessage\"), \" if a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<FieldSelect />\"), \" is outside a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Form />\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"static\",\n    \"static\": true\n  }), \"const options = [\\n  { value: 'cheddar', label: 'Cheddar' },\\n  { value: 'gouda', label: 'Gouda' },\\n  { value: 'swiss', label: 'Swiss' },\\n]\\n\\n<FieldSelect\\n  name=\\\"someField\\\"\\n  label=\\\"Some Field\\\"\\n  options={options}\\n  validationMessage={{ type: 'error', message: 'This is an error' }}\\n  alignValidationMessage=\\\"right\\\"\\n/>\\n\")), mdx(\"h2\", null, \"FieldSelectMulti\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<FieldSelectMulti />\"), \" component is composed of an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<SelectMulti />\"), \" component and a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Label />\"), \" component.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<FieldSelectMulti\\n  label=\\\"Label\\\"\\n  options={[\\n    { value: 'grape', label: 'Grape' },\\n    { value: 'banana', label: 'Banana' },\\n    { value: 'apple', label: 'Apple' },\\n  ]}\\n  placeholder=\\\"Search fruits\\\"\\n/>\\n\")), mdx(\"h3\", null, \"FieldSelectMulti attributes\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<FieldSelectMulti />\"), \" have attributes to help display additional information. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"detail\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"description\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"validation messages\"), \" are available to the component.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<FieldSelectMulti\\n  description=\\\"this is the description\\\"\\n  detail=\\\"detail...\\\"\\n  label=\\\"Label\\\"\\n  options={[\\n    { value: 'grape', label: 'Grape' },\\n    { value: 'banana', label: 'Banana' },\\n    { value: 'apple', label: 'Apple' },\\n  ]}\\n  placeholder=\\\"Search fruits\\\"\\n  validationMessage={{ type: 'error', message: 'This is an error' }}\\n/>\\n\")), mdx(\"h3\", null, \"FieldSelectMulti props\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<FieldSelectMulti />\"), \" can be set as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"desabled\"), \" and also as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"required\"), \". Aslo the width of the component will be 100% based of the parent and sibiling components. Using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Grid\"), \"can be helpful to position the compoents.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Grid>\\n  <FieldSelectMulti\\n    description=\\\"this is required\\\"\\n    label=\\\"Label\\\"\\n    options={[\\n      { value: 'grape', label: 'Grape' },\\n      { value: 'banana', label: 'Banana' },\\n      { value: 'apple', label: 'Apple' },\\n    ]}\\n    placeholder=\\\"Search fruits\\\"\\n    required\\n  />\\n  <FieldSelectMulti\\n    description=\\\"this is disabled\\\"\\n    disabled\\n    label=\\\"Label\\\"\\n    options={[\\n      { value: 'grape', label: 'Grape' },\\n      { value: 'banana', label: 'Banana' },\\n      { value: 'apple', label: 'Apple' },\\n    ]}\\n    placeholder=\\\"Search fruits\\\"\\n  />\\n</Grid>\\n\")), mdx(\"h2\", null, \"FieldText\"), mdx(Props, {\n    of: \"FieldText\",\n    mdxType: \"Props\"\n  }), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<FieldText />\"), \" component is composed of an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<InputText />\"), \" component and a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Label />\"), \" component. Using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<FieldText />\"), \" allows for rendering validation messages. By default, the label will render directly above the input field, which is the recommended convention, however this is adjustable with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"alignLabel\"), \" property.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<SpaceVertical>\\n  <FieldText name=\\\"firstName\\\" label=\\\"First Name\\\" />\\n  <FieldText name=\\\"lastName\\\" label=\\\" Last Name\\\" alignLabel=\\\"left\\\" />\\n  <FieldText name=\\\"requiredField\\\" label=\\\"A required field\\\" required />\\n</SpaceVertical>\\n\")), mdx(\"h2\", null, \"FieldTextArea\"), mdx(Props, {\n    of: \"FieldTextArea\",\n    mdxType: \"Props\"\n  }), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<FieldTextArea />\"), \" component is composed of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<TextArea />\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Label />\"), \" components. Using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<FieldTextArea />\"), \" allows for rendering validation messages.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<FieldTextArea\\n  label=\\\"FieldTextArea Label\\\"\\n  validationMessage={{ message: 'Some extra information' }}\\n/>\\n\")), mdx(\"h3\", null, \"FieldText Validation\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<FieldText />\"), \" component accepts \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"validationMessage\"), \" as a property. This is an object with properties \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"type\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"message\"), \".\"), mdx(\"p\", null, \"See \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ValidationMessage\"), \" \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/#!/ValidationMessage\"\n  }), \"here\")), mdx(\"p\", null, \"If you have multiple fields in need of validation, it is recommended that you wrap them in a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Form />\"), \" component and pass to it a dictionary with key as field name and value as a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ValidationMessage\"), \".\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"em\", {\n    parentName: \"strong\"\n  }, \"Note: In the current implementation, any \", mdx(\"inlineCode\", {\n    parentName: \"em\"\n  }, \"ValidationMessage\"), \" set in a \", mdx(\"inlineCode\", {\n    parentName: \"em\"\n  }, \"<FieldText />\"), \" component will be overridden by \", mdx(\"inlineCode\", {\n    parentName: \"em\"\n  }, \"ValidationMessages\"), \" set in the parent \", mdx(\"inlineCode\", {\n    parentName: \"em\"\n  }, \"<Form />\"), \" component. Because of this, it is highly recommended that you only ever directly set \", mdx(\"inlineCode\", {\n    parentName: \"em\"\n  }, \"ValidationMessage\"), \" if a \", mdx(\"inlineCode\", {\n    parentName: \"em\"\n  }, \"<FieldText />\"), \" is outside a \", mdx(\"inlineCode\", {\n    parentName: \"em\"\n  }, \"<Form />\"), \".\"))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<FieldText\\n  name=\\\"someField\\\"\\n  label=\\\"Some Field\\\"\\n  validationMessage={{ type: 'error', message: 'This is an error' }}\\n  alignValidationMessage=\\\"right\\\"\\n/>\\n\")), mdx(\"h2\", null, \"FieldTime\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<FieldTime />\"), \" component is composed of an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<InputTime />\"), \" component and a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Label />\"), \" component. It has attributes to help display additional information. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"detail\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"description\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"validation messages\"), \" are available to the component.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<FieldTime\\n  defaultValue=\\\"14:34\\\"\\n  description=\\\"this is the description\\\"\\n  detail=\\\"detail\\\"\\n  label=\\\"Label\\\"\\n  validationMessage={{ message: 'validation Message', type: 'error' }}\\n/>\\n\")), mdx(\"h3\", null, \"FieldTime props\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<FieldTime />\"), \" can be set as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"desabled\"), \" and also as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"required\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Grid>\\n  <FieldTime label=\\\"Label\\\" defaultValue=\\\"14:34\\\" required />\\n  <FieldTime disabled label=\\\"Label\\\" defaultValue=\\\"02:34\\\" />\\n</Grid>\\n\")), mdx(\"h2\", null, \"FieldTimeSelect\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<FieldTimeSelect />\"), \" component is composed of an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<InputTimeSelect />\"), \" component and a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Label />\"), \" component. It has attributes to help display additional information. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"detail\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"description\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"validation messages\"), \" are available to the component.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<FieldTimeSelect\\n  defaultValue=\\\"10:30\\\"\\n  description=\\\"this is the description\\\"\\n  detail=\\\"detail\\\"\\n  label=\\\"Label\\\"\\n  validationMessage={{ message: 'validation Message', type: 'error' }}\\n/>\\n\")), mdx(\"h2\", null, \"FieldToggleSwitch\"), mdx(Props, {\n    of: \"FieldToggleSwitch\",\n    mdxType: \"Props\"\n  }), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<FieldToggleSwitch />\"), \" component is composed of a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<ToggleSwitch />\"), \" component and a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Label />\"), \" component. By default, the label will render to the right of the toggle switch, however this is adjustable with the alignLabel property.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \";() => {\\n  const [on, setOn] = React.useState(false)\\n  const onChange = (e) => {\\n    setOn(e.target.checked)\\n  }\\n  return (\\n    <FieldToggleSwitch\\n      label=\\\"Development Mode\\\"\\n      alignLabel=\\\"left\\\"\\n      onChange={onChange}\\n      on={on}\\n    />\\n  )\\n}\\n\")), mdx(\"h2\", null, \"ValidationMessage\"), mdx(\"p\", null, \"This component renders a validation message, and is used by Field components after they are validated.\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"figma":"file/2MG6DoSjk4IaLnjjFCnKFf/Forms","github":"Form/Fields","propsOf":null,"status":null,"title":"Fields"},"tableOfContents":{"items":[{"url":"#fieldcheckbox","title":"FieldCheckbox"},{"url":"#fieldcolor","title":"FieldColor"},{"url":"#fieldradio","title":"FieldRadio"},{"url":"#fieldselect","title":"FieldSelect"},{"url":"#fieldselectmulti","title":"FieldSelectMulti"},{"url":"#fieldtext","title":"FieldText"},{"url":"#fieldtextarea","title":"FieldTextArea"},{"url":"#fieldtime","title":"FieldTime"},{"url":"#fieldtimeselect","title":"FieldTimeSelect"},{"url":"#fieldtoggleswitch","title":"FieldToggleSwitch"},{"url":"#validationmessage","title":"ValidationMessage"}]}}},"pageContext":{"id":"fbc4e139-8070-5d8e-a484-cccb9cbd274d"}}}