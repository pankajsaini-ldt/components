{"componentChunkName":"component---src-layout-documentation-tsx","path":"/components/forms/toggle-switch/","result":{"data":{"site":{"siteMetadata":{"title":"Looker UI Components"}},"mdx":{"id":"736726e5-05f2-5dc0-8616-9a99c8ae67e1","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"ToggleSwitch\",\n  \"propsOf\": \"ToggleSwitch\",\n  \"github\": \"Form/Inputs/ToggleSwitch/ToggleSwitch.tsx\",\n  \"figma\": \"file/2MG6DoSjk4IaLnjjFCnKFf/Forms\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Checkbox />\"), \" component renders a single checkbox element on the page, with no accompanying label. It is generally used to construct higher-order components like the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<FieldCheckbox />\"), \". If you are building a form, you probably want to use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<FieldCheckbox />\"), \" instead as it provides label support.\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ToggleSwitch\"), \" component is essentially a decorated checkbox that is either toggled on or off. For accessibility reasons you should always provide a label with your toggle switch, you can use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<FieldToggleSwitch>\"), \" component to quickly generate an accessible toggle switch with proper labeling. Its size can be changed using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"size\"), \" prop, which accepts px value as a number. Its default size is 20px.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \";() => {\\n  const [on, setOn] = React.useState(false)\\n  const handleChange = (event) => setOn(event.target.checked)\\n  return (\\n    <Label htmlFor=\\\"switch\\\">\\n      Toggle Switch\\n      <ToggleSwitch onChange={handleChange} on={on} id=\\\"switch\\\" />\\n    </Label>\\n  )\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"figma":"file/2MG6DoSjk4IaLnjjFCnKFf/Forms","github":"Form/Inputs/ToggleSwitch/ToggleSwitch.tsx","propsOf":"ToggleSwitch","status":null,"title":"ToggleSwitch"},"tableOfContents":{}}},"pageContext":{"id":"736726e5-05f2-5dc0-8616-9a99c8ae67e1"}}}