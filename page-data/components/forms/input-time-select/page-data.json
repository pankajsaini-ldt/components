{"componentChunkName":"component---src-layout-documentation-tsx","path":"/components/forms/input-time-select/","result":{"data":{"site":{"siteMetadata":{"title":"Looker UI Components"}},"mdx":{"id":"b9dadb1c-4216-5de6-b7c5-0991a6ad4fc2","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"InputTimeSelect\",\n  \"propsOf\": \"InputTimeSelect\",\n  \"github\": \"Form/Inputs/InputTimeSelect/InputTimeSelect.tsx\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"InputTimeSelect\"), \" provides a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/components/forms/select\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"Select\")), \"-based dropdown UI for picking a 24-hour time value. This is an alternative to \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/components/forms/input-time\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"InputTime\")), \", which provides an HTML5-standard time picking experience.\"), mdx(\"p\", null, \"The default implementation provides a dropdown list of times in 15-minute increments, formatted in for a 12-hour clock.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<InputTimeSelect />\\n\")), mdx(\"h1\", null, \"Intervals\"), mdx(\"p\", null, \"You can modify the list to increment time in 5, 10, 15, or 30 minute intervals.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<>\\n  <Heading as=\\\"h3\\\">5-minute</Heading>\\n  <InputTimeSelect interval={5} />\\n  <Heading as=\\\"h3\\\" mt=\\\"small\\\">\\n    10-minute\\n  </Heading>\\n  <InputTimeSelect interval={10} />\\n  <Heading as=\\\"h3\\\" mt=\\\"small\\\">\\n    15-minute\\n  </Heading>\\n  <InputTimeSelect interval={15} />\\n  <Heading as=\\\"h3\\\" mt=\\\"small\\\">\\n    30-minute\\n  </Heading>\\n  <InputTimeSelect interval={30} />\\n</>\\n\")), mdx(\"h1\", null, \"12- or 24-hour formatting\"), mdx(\"p\", null, \"Depending on readability preference, the time picker can format the labels in either 12- or 24-hour time. Regardless of label formatting, this component returns a 24-hour time formatted string when changed.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \";() => {\\n  const [value, setValue] = useState('14:00')\\n  return (\\n    <>\\n      <Heading as=\\\"H3\\\">12-hour</Heading>\\n      <Flex>\\n        <InputTimeSelect format=\\\"12h\\\" value={value} onChange={setValue} />\\n        <Text\\n          variant=\\\"secondary\\\"\\n          fontWeight=\\\"bold\\\"\\n          mt=\\\"xsmall\\\"\\n          ml=\\\"small\\\"\\n          textTransform=\\\"uppercase\\\"\\n          fontSize=\\\"small\\\"\\n        >\\n          Selected: {value}\\n        </Text>\\n      </Flex>\\n      <Heading as=\\\"H3\\\" mt=\\\"small\\\">\\n        24-hour\\n      </Heading>\\n      <Flex>\\n        <InputTimeSelect format=\\\"24h\\\" value={value} onChange={setValue} />\\n        <Text\\n          variant=\\\"secondary\\\"\\n          fontWeight=\\\"bold\\\"\\n          mt=\\\"xsmall\\\"\\n          ml=\\\"small\\\"\\n          textTransform=\\\"uppercase\\\"\\n          fontSize=\\\"small\\\"\\n        >\\n          Selected: {value}\\n        </Text>\\n      </Flex>\\n    </>\\n  )\\n}\\n\")), mdx(\"h1\", null, \"Controlled Component\"), mdx(\"p\", null, \"Consistent with all other inputs, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"InputTimeSelect\"), \" accepts \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"value\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onChange\"), \" props for use in a controlled form setting.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"value\"), \" accepts a 24-hour formatted time string (e.g. \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"15:45\"), \")\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"onChange\"), \" returns a 24-hour time string\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \";() => {\\n  const [value, setValue] = useState('14:00')\\n  return (\\n    <Flex>\\n      <InputTimeSelect value={value} onChange={setValue} />\\n      <Text\\n        variant=\\\"secondary\\\"\\n        fontWeight=\\\"bold\\\"\\n        mt=\\\"xsmall\\\"\\n        ml=\\\"small\\\"\\n        textTransform=\\\"uppercase\\\"\\n        fontSize=\\\"small\\\"\\n      >\\n        Selected: {value}\\n      </Text>\\n    </Flex>\\n  )\\n}\\n\")), mdx(\"h1\", null, \"DefaultValue\"), mdx(\"p\", null, \"If you don't want to control the form value externally, but still want to listen for changes, you can still pass in an initial \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"defaultValue\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \";() => {\\n  return (\\n    <Flex>\\n      <InputTimeSelect defaultValue=\\\"15:45\\\" />\\n    </Flex>\\n  )\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"figma":null,"github":"Form/Inputs/InputTimeSelect/InputTimeSelect.tsx","propsOf":"InputTimeSelect","status":null,"title":"InputTimeSelect"},"tableOfContents":{"items":[{"url":"#intervals","title":"Intervals"},{"url":"#12--or-24-hour-formatting","title":"12- or 24-hour formatting"},{"url":"#controlled-component","title":"Controlled Component"},{"url":"#defaultvalue","title":"DefaultValue"}]}}},"pageContext":{"id":"b9dadb1c-4216-5de6-b7c5-0991a6ad4fc2"}}}