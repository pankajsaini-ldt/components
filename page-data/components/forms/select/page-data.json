{"componentChunkName":"component---src-layout-documentation-tsx","path":"/components/forms/select/","result":{"data":{"site":{"siteMetadata":{"title":"Looker UI Components"}},"mdx":{"id":"8f41cfb0-47ce-57c6-8301-a907c0330127","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Select\",\n  \"figma\": \"file/2MG6DoSjk4IaLnjjFCnKFf/Forms\",\n  \"github\": \"Form/Inputs/Select/Select.tsx\",\n  \"propsOf\": \"Select\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Select />\"), \" component renders a single menu on the page, with no accompanying label. It is generally used to construct higher-order components like the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<FieldText />\"), \". If you are building a form, you probably want to use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<FieldSelect />\"), \" instead as it provides label and validation support.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Flex justifyContent=\\\"space-between\\\">\\n  <Select\\n    options={[\\n      { value: 'cheddar', label: 'Cheddar' },\\n      { value: 'gouda', label: 'Gouda' },\\n      { value: 'swiss', label: 'Swiss' },\\n    ]}\\n    mr=\\\"small\\\"\\n  />\\n  <Select\\n    options={[\\n      { value: 'cheddar', label: 'Cheddar' },\\n      { value: 'gouda', label: 'Gouda' },\\n      { value: 'swiss', label: 'Swiss' },\\n    ]}\\n    defaultValue=\\\"gouda\\\"\\n    mr=\\\"small\\\"\\n  />\\n  <Select placeholder=\\\"awesome!\\\" mr=\\\"small\\\" />\\n  <Select\\n    defaultValue=\\\"Some Value\\\"\\n    options={[\\n      { value: '1', label: 'thing' },\\n      { value: 'Some Value', label: \\\"Some Value's Label\\\" },\\n      { value: '2', label: 'other' },\\n    ]}\\n  />\\n</Flex>\\n\")), mdx(\"h2\", null, \"Filtering\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"isFilterable\"), \" option allows the user to type in the input, triggering the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onFilter\"), \" callback,\\nwhich should be used to narrow the options passed to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Select\"), \". Use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"isClearable\"), \" prop to allow\\nthe user to delete the current value.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \";() => {\\n  const [value, setValue] = React.useState()\\n  const [searchTerm, setSearchTerm] = React.useState('')\\n\\n  function handleChange(value) {\\n    setValue(value)\\n  }\\n  function handleFilter(term) {\\n    setSearchTerm(term)\\n  }\\n\\n  const newOptions = React.useMemo(() => {\\n    const options = [\\n      { label: 'Apples', value: '1' },\\n      { label: 'Bananas', value: '2' },\\n      { label: 'Oranges', value: '3' },\\n      { label: 'Pineapples', value: '4' },\\n      { label: 'Kiwis', value: '5' },\\n    ]\\n    if (searchTerm === '') return options\\n    return options.filter(option => {\\n      return option.label.toLowerCase().indexOf(searchTerm.toLowerCase()) > -1\\n    })\\n  }, [searchTerm])\\n\\n  return (\\n    <Select\\n      options={newOptions}\\n      aria-label=\\\"Fruits\\\"\\n      placeholder=\\\"Controlled, searchable, clearable\\\"\\n      isClearable\\n      isFilterable\\n      value={value}\\n      onChange={handleChange}\\n      onFilter={handleFilter}\\n    />\\n  )\\n}\\n\")), mdx(\"h2\", null, \"Name and ID\"), mdx(\"p\", null, \"A name and ID can be specified in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Select />\"), \" component. Names are important if the input is used in the context of a form, in which case a name is required for the value of the input to be captured.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Select\\n  name=\\\"someName\\\"\\n  id=\\\"someId\\\"\\n  options={[\\n    { value: 'cheddar', label: 'Cheddar' },\\n    { value: 'gouda', label: 'Gouda' },\\n    { value: 'swiss', label: 'Swiss' },\\n  ]}\\n/>\\n\")), mdx(\"h2\", null, \"Groups\"), mdx(\"p\", null, \"Options can be grouped under a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"title\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Select\\n  options={[\\n    {\\n      options: [\\n        { value: 'cheddar', label: 'Cheddar' },\\n        { value: 'gouda', label: 'Gouda' },\\n        { value: 'swiss', label: 'Swiss' },\\n      ],\\n      title: 'CHEESES',\\n    },\\n    {\\n      options: [\\n        { value: 'grape', label: 'Grapes' },\\n        { value: 'apple', label: 'Apples' },\\n        { value: 'strawberries', label: 'Strawberries' },\\n      ],\\n      title: 'FRUITS',\\n    },\\n  ]}\\n/>\\n\")), mdx(\"h2\", null, \"Descriptions\"), mdx(\"p\", null, \"Options can have a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"description\"), \" property.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Select\\n  options={[\\n    { value: 'cheddar', label: 'Cheddar', description: 'Popular in the US' },\\n    { value: 'gouda', label: 'Gouda', description: 'Dutch sheeps milk' },\\n    { value: 'swiss', label: 'Swiss', description: 'Full of holes' },\\n  ]}\\n/>\\n\")), mdx(\"h2\", null, \"Disabled Property\"), mdx(\"p\", null, \"Use the disable property to make an input field uneditable.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Flex justifyContent=\\\"space-between\\\">\\n  <Select\\n    disabled\\n    options={[\\n      { value: 'cheddar', label: 'Cheddar' },\\n      { value: 'gouda', label: 'Gouda' },\\n      { value: 'swiss', label: 'Swiss' },\\n    ]}\\n    flex={1}\\n  />\\n  <Select\\n    defaultValue=\\\"gouda\\\"\\n    disabled\\n    options={[\\n      { value: 'cheddar', label: 'Cheddar' },\\n      { value: 'gouda', label: 'Gouda' },\\n      { value: 'swiss', label: 'Swiss' },\\n    ]}\\n    ml=\\\"large\\\"\\n    flex={1}\\n  />\\n</Flex>\\n\")), mdx(\"h2\", null, \"Placeholder\"), mdx(\"p\", null, \"Placeholders are used to give a hint to the user of the expected value for the input.\\nTo allow the user to clear the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Select\"), \"'s value, add the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"isClearable\"), \" prop.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Flex justifyContent=\\\"space-between\\\">\\n  <Select\\n    placeholder=\\\"Select your cheese of choice...\\\"\\n    options={[\\n      { value: 'cheddar', label: 'Cheddar' },\\n      { value: 'gouda', label: 'Gouda' },\\n      { value: 'swiss', label: 'Swiss' },\\n    ]}\\n    flex={1}\\n  />\\n  <Select\\n    placeholder=\\\"Value can be cleared\\\"\\n    isClearable\\n    options={[\\n      { value: 'cheddar', label: 'Cheddar' },\\n      { value: 'gouda', label: 'Gouda' },\\n      { value: 'swiss', label: 'Swiss' },\\n    ]}\\n    ml=\\\"large\\\"\\n    flex={1}\\n  />\\n</Flex>\\n\")), mdx(\"h2\", null, \"scrollIntoView for improved UX on a long list of options\"), mdx(\"p\", null, \"If you're rendering a long list which scrolls beyond the max-height of the list, you can leverage the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"scrollIntoView\"), \" option property to focus the list to a helpful scroll position. Using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"scrollIntoView\"), \" will also highlight the option, so that keyboard navigation will start from there as well.\"), mdx(\"p\", null, \"When you open the following list, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Mascarpone\"), \" will be highlighted and visible at the bottom of the menu:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Flex justifyContent=\\\"space-between\\\">\\n  <Select\\n    placeholder=\\\"Select your cheese of choice...\\\"\\n    options={[\\n      { value: 'cheddar', label: 'Cheddar' },\\n      { value: 'gouda', label: 'Gouda' },\\n      { value: 'swiss', label: 'Swiss' },\\n      { value: 'string', label: 'String' },\\n      { value: 'parmesan', label: 'Parmigiano Reggiano' },\\n      { value: 'roquefort', label: 'Roquefort' },\\n      { value: 'brie', label: 'Brie' },\\n      { value: 'gruyere', label: 'Gruyere' },\\n      { value: 'feta', label: 'Feta' },\\n      { value: 'mozzarella', label: 'Mozzarella' },\\n      { value: 'manchego', label: 'Manchego' },\\n      { value: 'gorgonzola', label: 'Gorgonzola' },\\n      { value: 'epoisses', label: 'Epoisses' },\\n      { value: 'monterey-jack', label: 'Monterey Jack' },\\n      { value: 'muenster', label: 'Muenster' },\\n      { value: 'provolone', label: 'Provolone' },\\n      { value: 'blue', label: 'Blue' },\\n      { value: 'camembert', label: 'Camembert' },\\n      { value: 'havarti', label: 'Havarti' },\\n      { value: 'ricotta', label: 'Ricotta' },\\n      { value: 'mascarpone', label: 'Mascarpone', scrollIntoView: true },\\n    ]}\\n    flex={1}\\n  />\\n</Flex>\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"figma":"file/2MG6DoSjk4IaLnjjFCnKFf/Forms","github":"Form/Inputs/Select/Select.tsx","propsOf":"Select","status":null,"title":"Select"},"tableOfContents":{"items":[{"url":"#filtering","title":"Filtering"},{"url":"#name-and-id","title":"Name and ID"},{"url":"#groups","title":"Groups"},{"url":"#descriptions","title":"Descriptions"},{"url":"#disabled-property","title":"Disabled Property"},{"url":"#placeholder","title":"Placeholder"},{"url":"#scrollintoview-for-improved-ux-on-a-long-list-of-options","title":"scrollIntoView for improved UX on a long list of options"}]}}},"pageContext":{"id":"8f41cfb0-47ce-57c6-8301-a907c0330127"}}}