{"componentChunkName":"component---src-layout-documentation-tsx","path":"/components/modals/prompt/","result":{"data":{"site":{"siteMetadata":{"title":"Looker UI Components"}},"mdx":{"id":"62e5ae30-6ce7-5b1d-a9e0-40981bf58d92","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Prompt\",\n  \"propsOf\": \"Prompt\",\n  \"github\": \"Modal/Prompt.tsx\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Prompt/>\"), \" component is similar to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Confirm/>\"), \" component in that you can use either to render a modal.\"), mdx(\"p\", null, \"However, unlike the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Confirm/>\"), \", the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Prompt/>\"), \" component comes with a built in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<InputText/>\"), \" component. This makes it more suitable for use cases where you want to grab user input before performing an action.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Prompt\\n  title={'Choose a cheese!'}\\n  inputLabel={'Name of Cheese'}\\n  onCancel={(close) => {\\n    alert('Prompt closed')\\n    close()\\n  }}\\n  onSave={(value) => alert(`You chose ${value}`)}\\n>\\n  {(open) => <Button onClick={open}>Prompt</Button>}\\n</Prompt>\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"figma":null,"github":"Modal/Prompt.tsx","propsOf":"Prompt","status":null,"title":"Prompt"},"tableOfContents":{}}},"pageContext":{"id":"62e5ae30-6ce7-5b1d-a9e0-40981bf58d92"}}}