{"componentChunkName":"component---src-layout-documentation-tsx","path":"/components/modals/drawer/","result":{"data":{"site":{"siteMetadata":{"title":"Looker UI Components"}},"mdx":{"id":"fccc3008-6672-5131-87c2-d20234861cb8","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Drawer\",\n  \"propsOf\": \"Drawer\",\n  \"github\": \"Modal/Drawer/Drawer.tsx\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Drawers are modal overlays that provide contextual information. They are frequantly used for creation or management action by the user. The Drawer blocks interactions with the other content until dismissed either through clicking or tapping on the Backdrop or by selecting a close or completion action within the Drawer.\"), mdx(\"p\", null, \"The Drawer component allows you to manage state externally.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \";() => {\\n  const { value, setOn, setOff } = useToggle()\\n\\n  return (\\n    <div>\\n      <Drawer isOpen={value} onClose={() => setOff()}>\\n        <ModalContent>\\n          <Paragraph>Some content inside the Drawer</Paragraph>\\n          <Button>A button too!</Button>\\n        </ModalContent>\\n      </Drawer>\\n      <Button onClick={() => setOn()}>Open Drawer</Button>\\n    </div>\\n  )\\n}\\n\")), mdx(\"h2\", null, \"DrawerManager\"), mdx(Props, {\n    of: \"DrawerManager\",\n    mdxType: \"Props\"\n  }), mdx(\"p\", null, \"DrawerManager gives an easy way to compose a Drawer without the need to manage state.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<DrawerManager\\n  content={\\n    <ModalContent>\\n      <p>Some content</p>\\n      <Button>A button too!</Button>\\n    </ModalContent>\\n  }\\n>\\n  {(onClick) => <Button onClick={onClick}>Open Drawer</Button>}\\n</DrawerManager>\\n\")), mdx(\"h3\", null, \"Composed Drawer\"), mdx(\"p\", null, \"Drawers can be constructed with Modal helpers to create a complex layout a fixed-position header and footer as well as a content area that indicates overflow and allows the user to scroll through its contents.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<DrawerManager\\n  content={\\n    <React.Fragment>\\n      <ModalHeader>\\n        <Heading>Some Things to Look at</Heading>\\n      </ModalHeader>\\n      <ModalContent>\\n        <Box height=\\\"40vh\\\" bg=\\\"lavender\\\" mb=\\\"large\\\">\\n          Thing One\\n        </Box>\\n        <Box height=\\\"40vh\\\" bg=\\\"lavender\\\" mb=\\\"large\\\">\\n          Thing Two\\n        </Box>\\n        <Box height=\\\"40vh\\\" bg=\\\"lavender\\\" mb=\\\"large\\\">\\n          Thing Three\\n        </Box>\\n      </ModalContent>\\n      <ModalContext.Consumer>\\n        {({ closeModal }) => (\\n          <ModalFooter>\\n            <Button\\n              onClick={() => {\\n                alert(\\\"Oh yeah! You're done\\\")\\n                closeModal()\\n              }}\\n            >\\n              All Done\\n            </Button>\\n            <ButtonTransparent onClick={closeModal}>Cancel</ButtonTransparent>\\n          </ModalFooter>\\n        )}\\n      </ModalContext.Consumer>\\n    </React.Fragment>\\n  }\\n>\\n  {(onClick) => (\\n    <ButtonOutline onClick={onClick}>Drawer with sample content</ButtonOutline>\\n  )}\\n</DrawerManager>\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"figma":null,"github":"Modal/Drawer/Drawer.tsx","propsOf":"Drawer","status":null,"title":"Drawer"},"tableOfContents":{"items":[{"url":"#drawermanager","title":"DrawerManager"}]}}},"pageContext":{"id":"fccc3008-6672-5131-87c2-d20234861cb8"}}}