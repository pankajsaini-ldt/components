{"componentChunkName":"component---src-layout-documentation-tsx","path":"/components/layout/grid/","result":{"data":{"site":{"siteMetadata":{"title":"Looker UI Components"}},"mdx":{"id":"4293776f-4db1-5f54-812f-adb6ca51916d","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Grid\",\n  \"propsOf\": \"Grid\",\n  \"github\": \"Layout/Grid\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Grid />\"), \" provides a simple implementation of the CSS Grid.\"), mdx(\"h2\", null, \"Default\"), mdx(\"p\", null, \"Out-of-the-box the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Grid\"), \" has two columns with a \\\"medium\\\" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gap\"), \" between grid cells.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Grid>\\n  <GridPlaceholder minHeight=\\\"5rem\\\">A</GridPlaceholder>\\n  <GridPlaceholder>B</GridPlaceholder>\\n  <GridPlaceholder>C</GridPlaceholder>\\n  <GridPlaceholder>D</GridPlaceholder>\\n</Grid>\\n\")), mdx(\"h2\", null, \"Columns\"), mdx(\"p\", null, \"Use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"columns\"), \" prop to specify the number of columns to display.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Grid columns={4}>\\n  <GridPlaceholder minHeight=\\\"5rem\\\">A</GridPlaceholder>\\n  <GridPlaceholder>B</GridPlaceholder>\\n  <GridPlaceholder>C</GridPlaceholder>\\n  <GridPlaceholder>D</GridPlaceholder>\\n</Grid>\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Grid columns={1}>\\n  <GridPlaceholder minHeight=\\\"5rem\\\">A</GridPlaceholder>\\n  <GridPlaceholder>B</GridPlaceholder>\\n  <GridPlaceholder>C</GridPlaceholder>\\n  <GridPlaceholder>D</GridPlaceholder>\\n</Grid>\\n\")), mdx(\"h2\", null, \"Gap\"), mdx(\"p\", null, \"Specify \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gap\"), \" to change the distance between grid cells (defaults to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"medium\"), \")\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Grid gap=\\\"xxxlarge\\\">\\n  <GridPlaceholder minHeight=\\\"5rem\\\">A</GridPlaceholder>\\n  <GridPlaceholder>B</GridPlaceholder>\\n</Grid>\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Grid gap=\\\"none\\\">\\n  <GridPlaceholder minHeight=\\\"5rem\\\">A</GridPlaceholder>\\n  <GridPlaceholder>B</GridPlaceholder>\\n</Grid>\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"figma":null,"github":"Layout/Grid","propsOf":"Grid","status":null,"title":"Grid"},"tableOfContents":{"items":[{"url":"#default","title":"Default"},{"url":"#columns","title":"Columns"},{"url":"#gap","title":"Gap"}]}}},"pageContext":{"id":"4293776f-4db1-5f54-812f-adb6ca51916d"}}}