{"componentChunkName":"component---src-layout-documentation-tsx","path":"/components/layout/space/","result":{"data":{"site":{"siteMetadata":{"title":"Looker UI Components"}},"mdx":{"id":"edd67d1f-e2e6-526b-a355-5c78181928c3","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Space\",\n  \"propsOf\": \"Space\",\n  \"github\": \"Layout/Space\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Space />\"), \" & \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<SpaceVertical>\"), \" are designed to put space between their children. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Space\"), \" operates on the horizontal axis while \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SpaceVertical\"), \" operates on the vertical axis.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Space>\\n  <Button>Button A</Button>\\n  <Button>Button B</Button>\\n  <Button>Button C</Button>\\n</Space>\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<SpaceVertical>\\n  <Button>Button A</Button>\\n  <Button>Button B</Button>\\n  <Button>Button C</Button>\\n</SpaceVertical>\\n\")), mdx(\"h3\", null, \"Space & SpaceVertical Support spacing properties\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Margin (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"m\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"mx\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ml\"), \", etc...)\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Padding (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"p\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"px\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"pl\"), \", etc...)\")), mdx(\"h1\", null, \"Gap\"), mdx(\"p\", null, \"Specify the width of the gap between items:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Space gap=\\\"xlarge\\\">\\n  <Button>Button A</Button>\\n  <Button>Button B</Button>\\n  <Button>Button C</Button>\\n</Space>\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<SpaceVertical gap=\\\"xlarge\\\">\\n  <Button>Button A</Button>\\n  <Button>Button B</Button>\\n  <Button>Button C</Button>\\n</SpaceVertical>\\n\")), mdx(\"h2\", null, \"Reverse\"), mdx(\"p\", null, \"Reverse the order of the items in the space.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Space reverse>\\n  <Button>Button A</Button>\\n  <Button>Button B</Button>\\n  <Button>Button C</Button>\\n</Space>\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<SpaceVertical reverse>\\n  <Button>Button A</Button>\\n  <Button>Button B</Button>\\n  <Button>Button C</Button>\\n</SpaceVertical>\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"figma":null,"github":"Layout/Space","propsOf":"Space","status":null,"title":"Space"},"tableOfContents":{"items":[{"url":"#gap","title":"Gap","items":[{"url":"#reverse","title":"Reverse"}]}]}}},"pageContext":{"id":"edd67d1f-e2e6-526b-a355-5c78181928c3"}}}