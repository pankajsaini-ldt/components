{"componentChunkName":"component---src-layout-documentation-tsx","path":"/components/content/action-list/","result":{"data":{"site":{"siteMetadata":{"title":"Looker UI Components"}},"mdx":{"id":"5900db43-7bca-5aff-90ee-96223329da1a","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"ActionList\",\n  \"github\": \"ActionList\",\n  \"propsOf\": \"ActionList\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<ActionList>\"), \" component, like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Table>\"), \", displays tabular data. However, unlike a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Table>\"), \", an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<ActionList>\"), \" allows you to bake in a set of actions on each row. Common use cases include:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A list of users with user details and a \\\"Delete This User\\\" action\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A list of groups and their associated permissions with an \\\"Edit This Group's Permissions\\\" action on each row\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A list of recently run queries and a \\\"Rerun This Query\\\" action on each row\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<ActionList>\"), \" component acts as the main wrapper to other \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<ActionList>\"), \"-related components. It must receive an array of type \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ActionListColumns\"), \" in its \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"columns\"), \" prop. That array should contain objects that describe the columns in your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<ActionList>\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \";() => {\\n  const data = [\\n    {\\n      id: 1,\\n      name: 'Gorgonzola',\\n    },\\n    {\\n      id: 2,\\n      name: 'Cheddar',\\n    },\\n    {\\n      id: 3,\\n      name: `Blue`,\\n    },\\n  ]\\n\\n  const columns = [\\n    {\\n      id: 'id',\\n      primaryKey: true,\\n      title: 'ID',\\n      type: 'number',\\n      widthPercent: 20,\\n    },\\n    {\\n      id: 'name',\\n      title: 'Name',\\n      type: 'string',\\n      widthPercent: 80,\\n    },\\n  ]\\n\\n  const items = data.map(({ id, name }) => {\\n    actions = (\\n      <>\\n        <ActionListItemAction onClick={() => alert(`${name} selected!`)}>\\n          Select Cheese\\n        </ActionListItemAction>\\n      </>\\n    )\\n\\n    return (\\n      <ActionListItem\\n        key={id}\\n        id={id}\\n        onClick={() => alert('Row clicked')}\\n        actions={actions}\\n      >\\n        <ActionListItemColumn>{id}</ActionListItemColumn>\\n        <ActionListItemColumn>{name}</ActionListItemColumn>\\n      </ActionListItem>\\n    )\\n  })\\n\\n  return <ActionList columns={columns}>{items}</ActionList>\\n}\\n\")), mdx(\"h2\", null, \"ActionListItem\"), mdx(Props, {\n    of: \"ActionListItem\",\n    mdxType: \"Props\"\n  }), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<ActionListItem>\"), \" component represents a row of data in your Action List.\"), mdx(\"p\", null, \"To define actions on a row, pass in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<ActionListItemAction>\"), \" elements (wrapped in a React.Fragment if there are multiple) into the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"actions\"), \" prop.\"), mdx(\"p\", null, \"You can also pass a callback to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onClick\"), \" prop, but note that this callback will not fire when clicking on the Vertical Dots \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<IconButton />\"), \".\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"actionsTooltip\"), \" prop can be used to set the tooltip text of a row's actions button. This prop will also be used in a visually hidden label on the actions button, which is especially useful for getting the actions button DOM element when testing.\"), mdx(\"h2\", null, \"ActionListItemColumn\"), mdx(Props, {\n    of: \"ActionListItemColumn\",\n    mdxType: \"Props\"\n  }), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<ActionListItemColumn>\"), \" component is equivalent to a data cell in your Action List. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<ActionListItemColumn>\"), \" elements should always be children of an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<ActionListItem>\"), \" element (i.e. each row should contain some number of column elements).\"), mdx(\"p\", null, \"In its simplest form, an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<ActionListItemColumn>\"), \" element will display whatever child elements it has.\"), mdx(\"p\", null, \"You can also create more advanced layouts within your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<ActionListItemColumn>\"), \" by utilizing the optional \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"detail\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"indicator\"), \" props.\"), mdx(\"p\", null, \"Passing in a React element into the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"detail\"), \" prop will display said element underneath any child elements of your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<ActionListItemColumn>\"), \".\"), mdx(\"p\", null, \"Passing in a React element into the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"indicator\"), \" prop will display said element left of any child elements (and any element passed into the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"detail\"), \" prop).\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \";() => {\\n  const link = (\\n    <Link\\n      onClick={(event) => event.stopPropagation()}\\n      href=\\\"https://en.wikipedia.org/wiki/Cheddar_cheese\\\"\\n    >\\n      Wikipedia\\n    </Link>\\n  )\\n\\n  const indicator = (\\n    <Icon name=\\\"User\\\" color=\\\"key\\\" size={24} marginRight=\\\"small\\\" />\\n  )\\n\\n  const columns = [\\n    {\\n      id: 'name',\\n      title: 'Name',\\n      type: 'string',\\n      widthPercent: 100,\\n    },\\n  ]\\n\\n  return (\\n    <ActionList columns={columns}>\\n      <ActionListItem id={'cheddar'} onClick={() => alert(`Row clicked`)}>\\n        <ActionListItemColumn detail={link} indicator={indicator}>\\n          Cheddar\\n        </ActionListItemColumn>\\n      </ActionListItem>\\n    </ActionList>\\n  )\\n}\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note:\"), \" By default, clicking on any element within an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<ActionListItemColumn>\"), \" will trigger the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onClick\"), \" of the parent \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<ActionListItem>\"), \". To prevent this, make sure to include an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"event.stopPropagation()\"), \" call within your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<ActionListItemColumn>\"), \"'s \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onClick\"), \".\"), mdx(\"h2\", null, \"ActionListItemAction\"), mdx(Props, {\n    of: \"ActionListItemAction\",\n    mdxType: \"Props\"\n  }), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<ActionListItemAction>\"), \" component represents an actionable item on the rows of your Action List. As noted above, you can supply each of your rows with actions by passing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<ActionListItemAction>\"), \" elements into the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"actions\"), \" prop of the parent \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<ActionListItem>\"), \" element.\"), mdx(\"h2\", null, \"ActionListManager\"), mdx(Props, {\n    of: \"ActionListManager\",\n    mdxType: \"Props\"\n  }), mdx(\"p\", null, \"In the event that your page and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<ActionList>\"), \" render before data is available (i.e. before a Promise resolves), you can use an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<ActionListManager>\"), \" component to conditionally render a loading icon until your data is ready.\"), mdx(\"p\", null, \"Passing \\\"false\\\" into an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<ActionListManager>\"), \"'s \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"isLoading\"), \" prop will render a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Spinner>\"), \" icon. Once you pass in \\\"true\\\" into the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"isLoading\"), \" prop, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<ActionListManager>\"), \" will render its children instead.\"), mdx(\"p\", null, \"Additionally, you can render a \\\"No Results\\\" message using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"noResults\"), \" prop. When \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"noResults\"), \" is \\\"true\\\", the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<ActionListManager>\"), \" will display a \\\"No Results\\\" message in place of its children.\"), mdx(\"p\", null, \"To customize the \\\"No Results\\\" message text, use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"noResultsText\"), \" prop.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \";() => {\\n  const [isLoading, setIsLoading] = useState(true)\\n  setTimeout(() => setIsLoading(false), 5000)\\n\\n  // Change noResults to \\\"true\\\" to render the noResultsText\\n  return (\\n    <ActionListManager\\n      isLoading={isLoading}\\n      noResults={false}\\n      noResultsText={'No Cheese Here :('}\\n    >\\n      Swiss\\n    </ActionListManager>\\n  )\\n}\\n\")), mdx(\"h2\", null, \"Sorting\"), mdx(\"p\", null, \"You can implement sorting on an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<ActionList>\"), \" by passing a function into the optional \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onSort\"), \" prop.\"), mdx(\"p\", null, \"Clicking on the column header will lead to an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onSort\"), \" call, with (1) the column's id and (2) the next sort direction, passed in as arguments. The sort direction argument will either be a string 'desc' if the current sort direction of the column is 'asc', or 'asc' in all other cases.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note:\"), \" Only columns whose corresponding column objects have \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"canSort: true\"), \" will be sortable. In addition, if your data is initially sorted on a specific column, you may want to default the corresponding column object with a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sortDirection\"), \" property.\"), mdx(\"p\", null, \"The function passed into \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onSort\"), \", generally speaking, should perform these actions for proper sorting behavior:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Update the corresponding column object's \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"sortDirection\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Sort the collection representing your data\")), mdx(\"p\", null, \"If you want default sorting behavior, you can use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"doDefaultActionListSort\"), \" helper function. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"doDefaultActionListSort\"), \" helper function will return a sorted data array as well as an updated columns array, which can then be used to replace your existing arrays post-sort.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \";() => {\\n  const [data, setData] = useState([\\n    {\\n      id: 1,\\n      name: 'Gorgonzola',\\n    },\\n    {\\n      id: 2,\\n      name: 'Cheddar',\\n    },\\n    {\\n      id: 3,\\n      name: `Blue`,\\n    },\\n  ])\\n\\n  const [columns, setColumns] = useState([\\n    {\\n      canSort: true,\\n      id: 'id',\\n      primaryKey: true,\\n      title: 'ID',\\n      type: 'number',\\n      sortDirection: 'asc',\\n      widthPercent: 20,\\n    },\\n    {\\n      canSort: true,\\n      id: 'name',\\n      title: 'Name',\\n      type: 'string',\\n      widthPercent: 80,\\n    },\\n  ])\\n\\n  const onSort = (id, sortDirection) => {\\n    const {\\n      columns: sortedColumns,\\n      data: sortedData,\\n    } = doDefaultActionListSort(data, columns, id, sortDirection)\\n    setData(sortedData)\\n    setColumns(sortedColumns)\\n  }\\n\\n  const items = data.map(({ id, name }) => {\\n    actions = (\\n      <>\\n        <ActionListItemAction onClick={() => alert(`${name} selected!`)}>\\n          Select Cheese\\n        </ActionListItemAction>\\n      </>\\n    )\\n\\n    return (\\n      <ActionListItem\\n        id={id}\\n        key={id}\\n        onClick={() => alert('Row clicked')}\\n        actions={actions}\\n      >\\n        <ActionListItemColumn>{id}</ActionListItemColumn>\\n        <ActionListItemColumn>{name}</ActionListItemColumn>\\n      </ActionListItem>\\n    )\\n  })\\n\\n  return (\\n    <ActionList onSort={onSort} columns={columns}>\\n      {items}\\n    </ActionList>\\n  )\\n}\\n\")), mdx(\"h2\", null, \"Selecting rows\"), mdx(\"p\", null, \"You can add row select behavior on an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<ActionList/>\"), \" by passing in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"canSelect\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onSelect\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"itemsSelected\"), \" props.\"), mdx(\"p\", null, \"An \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<ActionList/>\"), \" with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"canSelect\"), \" prop passed in will display \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Checkbox/>\"), \"s on each of its rows.\"), mdx(\"p\", null, \"Clicking on a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Checkbox/>\"), \" will trigger the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onSelect\"), \" callback prop, with the id of the clicked \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<ActionListItem/>\"), \" passed in as an argument.\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"itemsSelected\"), \" prop should be given the id's of all selected \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<ActionListItem>\"), \"s.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note:\"), \" The id of an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<ActionListItem>\"), \"s must be a string, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"itemSelected\"), \" prop should be an array of strings.\"), mdx(\"p\", null, \"If you would like a row's \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onClick\"), \" to toggle a row's selected state, rather than have a custom-defined \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onClick\"), \", you can do so by passing in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onClickRowSelect\"), \" prop into the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<ActionList/>\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \";() => {\\n  const [selections, setSelections] = useState([])\\n  const onSelect = (selection) => {\\n    setSelections(\\n      selections.includes(selection)\\n        ? selections.filter((item) => item !== selection)\\n        : [...selections, selection]\\n    )\\n  }\\n\\n  const data = [\\n    {\\n      id: 1,\\n      name: 'Gorgonzola',\\n    },\\n    {\\n      id: 2,\\n      name: 'Cheddar',\\n    },\\n    {\\n      id: 3,\\n      name: `Blue`,\\n      disabled: true,\\n    },\\n  ]\\n\\n  const columns = [\\n    {\\n      id: 'id',\\n      primaryKey: true,\\n      title: 'ID',\\n      type: 'number',\\n      widthPercent: 20,\\n    },\\n    {\\n      id: 'name',\\n      title: 'Name',\\n      type: 'string',\\n      widthPercent: 80,\\n    },\\n  ]\\n\\n  const items = data.map(({ id, name, disabled }) => {\\n    actions = (\\n      <>\\n        <ActionListItemAction onClick={() => alert(`${name} selected!`)}>\\n          Select Cheese\\n        </ActionListItemAction>\\n      </>\\n    )\\n\\n    return (\\n      <ActionListItem\\n        key={id}\\n        id={String(id)}\\n        onClick={() => alert('Row clicked')}\\n        actions={actions}\\n        disabled={disabled}\\n      >\\n        <ActionListItemColumn>{id}</ActionListItemColumn>\\n        <ActionListItemColumn>{name}</ActionListItemColumn>\\n      </ActionListItem>\\n    )\\n  })\\n\\n  return (\\n    <ActionList\\n      canSelect\\n      onSelect={onSelect}\\n      itemsSelected={selections}\\n      columns={columns}\\n    >\\n      {items}\\n    </ActionList>\\n  )\\n}\\n\")), mdx(\"h3\", null, \"Selecting all rows\"), mdx(\"p\", null, \"A header checkbox is included next to your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<ActionList/>\"), \"'s header when the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"canSelect\"), \" prop is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \".\"), mdx(\"p\", null, \"Clicking on this header checkbox will trigger the callback passed into the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<ActionList/>\"), \"'s \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onSelectAll\"), \" prop.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note:\"), \" If you would like to remove the header checkbox, but retain the row checkboxes, pass in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"{ all: false }\"), \" into your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"canSelect\"), \" prop.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \";() => {\\n  const data = [\\n    {\\n      id: 1,\\n      name: 'Gorgonzola',\\n    },\\n    {\\n      id: 2,\\n      name: 'Cheddar',\\n    },\\n    {\\n      id: 3,\\n      name: `Blue`,\\n    },\\n  ]\\n\\n  const columns = [\\n    {\\n      id: 'id',\\n      primaryKey: true,\\n      title: 'ID',\\n      type: 'number',\\n      widthPercent: 20,\\n    },\\n    {\\n      id: 'name',\\n      title: 'Name',\\n      type: 'string',\\n      widthPercent: 80,\\n    },\\n  ]\\n\\n  const [selections, setSelections] = useState([])\\n  const onSelect = (selection) => {\\n    setSelections(\\n      selections.includes(selection)\\n        ? selections.filter((item) => item !== selection)\\n        : [...selections, selection]\\n    )\\n  }\\n\\n  const allSelectableItems = data.map(({ id }) => String(id))\\n\\n  const onSelectAll = () => {\\n    setSelections(selections.length ? [] : allSelectableItems)\\n  }\\n\\n  const items = data.map(({ id, name }) => (\\n    <ActionListItem\\n      id={String(id)}\\n      key={id}\\n      onClick={() => alert(`${name} clicked`)}\\n      actions={\\n        <>\\n          <ActionListItemAction onClick={() => alert(`${name} deleted`)}>\\n            Delete\\n          </ActionListItemAction>\\n        </>\\n      }\\n    >\\n      <ActionListItemColumn>{id}</ActionListItemColumn>\\n      <ActionListItemColumn>{name}</ActionListItemColumn>\\n    </ActionListItem>\\n  ))\\n\\n  const [isLoading, setIsLoading] = useState(true)\\n  setTimeout(() => setIsLoading(false), 750)\\n\\n  return (\\n    <>\\n      <ActionList\\n        canSelect\\n        onSelect={onSelect}\\n        onSelectAll={onSelectAll}\\n        itemsSelected={selections}\\n        columns={columns}\\n      >\\n        {items}\\n      </ActionList>\\n\\n      <Divider my=\\\"large\\\" />\\n\\n      <ActionList\\n        canSelect={{ all: false }}\\n        onSelect={onSelect}\\n        onSelectAll={onSelectAll}\\n        itemsSelected={selections}\\n        columns={columns}\\n      >\\n        {items}\\n      </ActionList>\\n    </>\\n  )\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"figma":null,"github":"ActionList","propsOf":"ActionList","status":null,"title":"ActionList"},"tableOfContents":{"items":[{"url":"#actionlistitem","title":"ActionListItem"},{"url":"#actionlistitemcolumn","title":"ActionListItemColumn"},{"url":"#actionlistitemaction","title":"ActionListItemAction"},{"url":"#actionlistmanager","title":"ActionListManager"},{"url":"#sorting","title":"Sorting"},{"url":"#selecting-rows","title":"Selecting rows"}]}}},"pageContext":{"id":"5900db43-7bca-5aff-90ee-96223329da1a"}}}