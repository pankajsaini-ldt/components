{"componentChunkName":"component---src-layout-documentation-tsx","path":"/components/content/avatar/","result":{"data":{"site":{"siteMetadata":{"title":"Looker UI Components"}},"mdx":{"id":"6293d8b5-ca18-5c50-9cde-2bc03b548dc2","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Avatar\",\n  \"propsOf\": \"Avatar\",\n  \"github\": \"Avatar\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Avatar\"), \" is most often used to identify individual users or groups. Lens offers three variations on it:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"AvatarUser\"), \" displays the profile image, if there is one available, or the user's initials.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"AvatarIcon\"), \" displays an icon as the avatar, which can be selected with the icon prop, and has the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"User\"), \" icon as default.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"AvatarCombo\"), \" displayed \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"AvatarUser\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"AvatarIcon\"), \" with secondary \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"AvatarIcon\"), \" connected to it.\")), mdx(\"h2\", null, \"AvatarUser\"), mdx(\"p\", null, \"Takes a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"User\"), \" object as specified by Looker's SDK and produces an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Avatar\"), \". The minimum keys in object are \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"avatar_url\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"first_name\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"last_name\"), \". If the user in question has a blank image (Gravatar's default if the user hasn't yet selected a profile picture) the user's initials will be used instead of the image.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \";() => {\\n  const user = {\\n    avatar_url: 'https://www.fillmurray.com/150/150',\\n    first_name: 'Bill',\\n    last_name: 'Murray',\\n  }\\n\\n  return (\\n    <Flex justifyContent=\\\"space-around\\\" alignItems=\\\"center\\\">\\n      <AvatarUser user={user} size=\\\"xxsmall\\\" />\\n      <AvatarUser user={user} />\\n      <AvatarUser user={{ ...user, avatar_url: null }} size=\\\"xxsmall\\\" />\\n      <AvatarUser user={{ ...user, avatar_url: null }} />\\n    </Flex>\\n  )\\n}\\n\")), mdx(\"h2\", null, \"AvatarIcon\"), mdx(\"p\", null, \"Has a default icon value of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"User\"), \". That value can be specified by setting the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"icon\"), \" property.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Flex justifyContent=\\\"space-around\\\" alignItems=\\\"center\\\">\\n  <AvatarIcon />\\n  <AvatarIcon icon=\\\"Code\\\" />\\n</Flex>\\n\")), mdx(\"h3\", null, \"Size\"), mdx(\"p\", null, \"Both \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AvatarIcon\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AvatarUser\"), \" can have a specify a size. Possible values are \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"xxsmall\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"xsmall\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"small\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"medium\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"large\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"small\"), \" is the default value. If you specify \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"xxsmall\"), \" for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AvatarUser\"), \" will only display the first initial.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \";() => {\\n  const data = {\\n    avatar_url: 'https://www.fillmurray.com/150/150',\\n    first_name: 'Bill',\\n    last_name: 'Murray',\\n  }\\n  return (\\n    <Flex justifyContent=\\\"space-around\\\" alignItems=\\\"center\\\">\\n      <AvatarIcon size=\\\"xxsmall\\\" />\\n      <AvatarIcon size=\\\"xsmall\\\" />\\n      <AvatarIcon />\\n      <AvatarIcon size=\\\"medium\\\" />\\n      <AvatarIcon size=\\\"large\\\" />\\n      <AvatarUser user={data} size=\\\"xxsmall\\\" />\\n      <AvatarUser user={data} size=\\\"xsmall\\\" />\\n      <AvatarUser user={data} />\\n      <AvatarUser user={data} size=\\\"medium\\\" />\\n      <AvatarUser user={data} size=\\\"large\\\" />\\n    </Flex>\\n  )\\n}\\n\")), mdx(\"h3\", null, \"Color\"), mdx(\"p\", null, \"Avatars allow the developer to specify a color to use. Default Colors:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"AvatarIcon\"), \": \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"keyFocus\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"AvatarUser\"), \": \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"key\"))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \";() => {\\n  const data = {\\n    first_name: 'Bill',\\n    last_name: 'Murray',\\n  }\\n  return (\\n    <Flex justifyContent=\\\"space-around\\\" alignItems=\\\"center\\\">\\n      <AvatarUser user={data} />\\n      <AvatarIcon />\\n      <AvatarUser color=\\\"inform\\\" user={data} />\\n      <AvatarIcon color=\\\"inform\\\" />\\n      <AvatarUser color=\\\"positive\\\" user={data} />\\n      <AvatarIcon color=\\\"positive\\\" />\\n      <AvatarIcon color=\\\"inverseOn\\\" bg=\\\"positive\\\" />\\n    </Flex>\\n  )\\n}\\n\")), mdx(\"h2\", null, \"AvatarCombo\"), mdx(\"p\", null, \"A combination of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AvatarUser\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AvatarIcon\"), \".\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"secondaryIcon\"), \" - icon used for secondary avatar. Default: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"User\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"secondaryColor\"), \" - color to use for secondary avatar border & icon. Default: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"key\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"secondaryBg\"), \" - color to use for secondary avatar background. Default: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"inverseOn\"))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \";() => {\\n  const data = {\\n    avatar_url: 'https://www.fillmurray.com/150/150',\\n    first_name: 'Bill',\\n    last_name: 'Murray',\\n  }\\n  const noImageData = { ...data, avatar_url: null }\\n\\n  return (\\n    <Flex justifyContent=\\\"space-around\\\" alignItems=\\\"center\\\">\\n      <AvatarCombo />\\n      <AvatarCombo user={noImageData} />\\n      <AvatarCombo user={data} />\\n      <AvatarCombo\\n        user={noImageData}\\n        color=\\\"inform\\\"\\n        secondaryBg=\\\"key\\\"\\n        secondaryColor=\\\"inverseOn\\\"\\n        secondaryIcon=\\\"User\\\"\\n      />\\n    </Flex>\\n  )\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"figma":null,"github":"Avatar","propsOf":"Avatar","status":null,"title":"Avatar"},"tableOfContents":{"items":[{"url":"#avataruser","title":"AvatarUser"},{"url":"#avataricon","title":"AvatarIcon"},{"url":"#avatarcombo","title":"AvatarCombo"}]}}},"pageContext":{"id":"6293d8b5-ca18-5c50-9cde-2bc03b548dc2"}}}