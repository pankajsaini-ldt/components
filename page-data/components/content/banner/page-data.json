{"componentChunkName":"component---src-layout-documentation-tsx","path":"/components/content/banner/","result":{"data":{"site":{"siteMetadata":{"title":"Looker UI Components"}},"mdx":{"id":"a3dbcd1a-5962-54c6-9cbd-552ded6ad3b9","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Banner\",\n  \"propsOf\": \"Banner\",\n  \"github\": \"Banner\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Banner />\"), \" component is used to alert the user with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"warning\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"error\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"info\"), \", or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"confirmation\"), \" messages, settable via the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"intent\"), \" property.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<SpaceVertical gap=\\\"xsmall\\\">\\n  <Banner intent=\\\"warning\\\">Warning</Banner>\\n  <Banner intent=\\\"error\\\">Error</Banner>\\n  <Banner intent=\\\"info\\\">Info</Banner>\\n  <Banner intent=\\\"confirmation\\\">Confirmation</Banner>\\n</SpaceVertical>\\n\")), mdx(\"h2\", null, \"canDismiss\"), mdx(\"p\", null, \"Banners can also be set to be \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"canDismiss\"), \", giving them a close button, and allows for a dismiss handler to be passed to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onDismiss\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \";() => {\\n  const { value, setOff, setOn } = useToggle(true)\\n  return value ? (\\n    <Banner intent=\\\"warning\\\" onDismiss={setOff} canDismiss>\\n      I can be closed\\n    </Banner>\\n  ) : (\\n    <ButtonOutline m=\\\"medium\\\" onClick={setOn}>\\n      Show Banner\\n    </ButtonOutline>\\n  )\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"figma":null,"github":"Banner","propsOf":"Banner","status":null,"title":"Banner"},"tableOfContents":{"items":[{"url":"#candismiss","title":"canDismiss"}]}}},"pageContext":{"id":"a3dbcd1a-5962-54c6-9cbd-552ded6ad3b9"}}}