{"componentChunkName":"component---src-layout-documentation-tsx","path":"/components/content/status/","result":{"data":{"site":{"siteMetadata":{"title":"Looker UI Components"}},"mdx":{"id":"b0d753f2-b9d0-5a79-b8c5-5c2d5f411a3b","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Status\",\n  \"propsOf\": \"Status\",\n  \"github\": \"Status\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Status\"), \" component can be used to indicate \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"critical\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"inform\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"neutral\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"positive\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"warn\"), \" of an item and to inform user and take actions. This is accomplished using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"intent\"), \" property.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Space around>\\n  <Status intent=\\\"critical\\\" />\\n  <Status intent=\\\"inform\\\" />\\n  <Status intent=\\\"neutral\\\" />\\n  <Status intent=\\\"positive\\\" />\\n  <Status intent=\\\"warn\\\" />\\n</Space>\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"figma":null,"github":"Status","propsOf":"Status","status":null,"title":"Status"},"tableOfContents":{}}},"pageContext":{"id":"b0d753f2-b9d0-5a79-b8c5-5c2d5f411a3b"}}}