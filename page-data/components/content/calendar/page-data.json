{"componentChunkName":"component---src-layout-documentation-tsx","path":"/components/content/calendar/","result":{"data":{"site":{"siteMetadata":{"title":"Looker UI Components"}},"mdx":{"id":"91906155-9309-5004-b66f-1823e1086e06","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Calendar\",\n  \"github\": \"Calendar\",\n  \"propsOf\": \"Calendar\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(MessageBar, {\n    mdxType: \"MessageBar\"\n  }, \"If you need an interactive date picker, please use\", ' ', mdx(\"a\", {\n    href: \"/components/forms/input-date\"\n  }, \"InputDate\"), \" or InputDateRange instead.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Calendar\"), \" is a stateless component which renders a standard calendar month. It accepts a limited amount of props, and is the foundation of our more useful \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/components/forms/input-date\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"InputDate\")), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"InputDateRange\"), \" components.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Calendar />\\n\")), mdx(\"h2\", null, \"Props\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Calendar\"), \" shares many of the same props as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"InputDate\"), \". Please \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/components/forms/input-date\"\n  }), \"view those docs\"), \" for interactive examples. But if you wish to use Calendar to build fully custom experiences, the following props are available for you:\"), mdx(CalendarPropTable, {\n    mdxType: \"CalendarPropTable\"\n  }), mdx(\"h2\", null, \"Size\"), mdx(\"p\", null, \"We support three sizes: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"small\"), \", \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"medium (default)\")), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"large\"), \". The font and grid are sized accordingly.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \";() => {\\n  const [value, setValue] = useState('medium')\\n  return (\\n    <>\\n      <div>\\n        <ButtonToggle value={value} onChange={setValue}>\\n          <ButtonItem>small</ButtonItem>\\n          <ButtonItem>medium</ButtonItem>\\n          <ButtonItem>large</ButtonItem>\\n        </ButtonToggle>\\n      </div>\\n      <Calendar size={value} />\\n    </>\\n  )\\n}\\n\")), mdx(\"h2\", null, \"Navigation Callbacks\"), mdx(\"p\", null, \"We support four different callbacks to hook into various navigation events:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(Code, {\n    mdxType: \"Code\"\n  }, \"onNextClick\"), \": the user clicked the right arrow\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(Code, {\n    mdxType: \"Code\"\n  }, \"onPrevClick\"), \": the user clicked the right arrow\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(Code, {\n    mdxType: \"Code\"\n  }, \"onNowClick\"), \": the user clicked the month label to return to the current month\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(Code, {\n    mdxType: \"Code\"\n  }, \"onMonthChange\"), \": the user navigated to a new month (could be through any mouse or keyboard interaction)\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \";() => {\\n  const onNextClick = (date) =>\\n    alert(`Clicked \\\"Next\\\" (${date.getMonth() + 1}/${date.getFullYear()})`)\\n  const onNowClick = (date) =>\\n    alert(`Clicked \\\"Now\\\" (${date.getMonth() + 1}/${date.getFullYear()})`)\\n  const onPrevClick = (date) =>\\n    alert(`Clicked \\\"Prev\\\" (${date.getMonth() + 1}/${date.getFullYear()})`)\\n  const onMonthChange = (date) =>\\n    alert(`Month Changed (${date.getMonth() + 1}/${date.getFullYear()})`)\\n  return (\\n    <Calendar\\n      onNextClick={onNextClick}\\n      onNowClick={onNowClick}\\n      onPrevClick={onPrevClick}\\n      onMonthChange={onMonthChange}\\n    />\\n  )\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"figma":null,"github":"Calendar","propsOf":"Calendar","status":null,"title":"Calendar"},"tableOfContents":{"items":[{"url":"#props","title":"Props"},{"url":"#size","title":"Size"},{"url":"#navigation-callbacks","title":"Navigation Callbacks"}]}}},"pageContext":{"id":"91906155-9309-5004-b66f-1823e1086e06"}}}