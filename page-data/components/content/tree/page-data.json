{"componentChunkName":"component---src-layout-documentation-tsx","path":"/components/content/tree/","result":{"data":{"site":{"siteMetadata":{"title":"Looker UI Components"}},"mdx":{"id":"f64c243a-eb48-500c-930a-dd55323b8b9a","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Tree\",\n  \"github\": \"Tree\",\n  \"propsOf\": \"Tree\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tree\"), \", like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Accordion\"), \", is a collapsible section component designed for hiding and showing content. However, unlike \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Accordion\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tree\"), \" has a more structured interface and is best used when building tree views like a file structure or a sidebar.\"), mdx(\"p\", null, \"Use the required \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"label\"), \" prop to set the text of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tree\"), \"'s disclosure.\"), mdx(\"p\", null, \"To further customize the look of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tree\"), \"'s disclosure, you can use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"icon\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"iconSize\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"detail\"), \" props.\"), mdx(\"p\", null, \"Passing in an element into the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"detail\"), \" prop will result in that element being displayed right of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tree\"), \"'s label.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note:\"), \" Use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"detailStopPropagation\"), \" prop if you would like to prevent \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tree\"), \" opening and closing when the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"detail\"), \" element is clicked.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Tree\\n  label=\\\"Orders\\\"\\n  icon=\\\"Table\\\"\\n  detail={<Text variant=\\\"subdued\\\">thelook</Text>}\\n>\\n  <TreeItem icon=\\\"FieldNumber\\\">Cost</TreeItem>\\n  <TreeItem icon=\\\"FieldDistance\\\">Location</TreeItem>\\n  <TreeItem icon=\\\"FieldTier\\\">Tier</TreeItem>\\n  <TreeItem icon=\\\"FieldYesNo\\\">Oui ou Non</TreeItem>\\n</Tree>\\n\")), mdx(\"p\", null, \"Use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"border\"), \" prop if you would like to have vertical lines expand from your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tree\"), \"'s indicator icon when open.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Tree\\n  border\\n  label=\\\"Orders\\\"\\n  icon=\\\"Table\\\"\\n  detail={<Text variant=\\\"secondary\\\">thelook</Text>}\\n  defaultOpen\\n>\\n  <Tree label=\\\"Created\\\" defaultOpen>\\n    <TreeItem>Created Date</TreeItem>\\n    <TreeItem>Created Month</TreeItem>\\n    <TreeItem>Created Year</TreeItem>\\n    <TreeItem>Created Quarter</TreeItem>\\n  </Tree>\\n</Tree>\\n\")), mdx(\"h2\", null, \"Nesting Trees\"), mdx(\"p\", null, \"You can nest trees within each other by passing a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tree\"), \" in as child of the parent \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tree\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Tree label=\\\"Orders\\\" icon=\\\"Table\\\">\\n  <Tree label=\\\"Created\\\">\\n    <TreeItem>Created Date</TreeItem>\\n    <TreeItem>Created Month</TreeItem>\\n    <TreeItem>Created Year</TreeItem>\\n    <TreeItem>Created Quarter</TreeItem>\\n  </Tree>\\n</Tree>\\n\")), mdx(\"h2\", null, \"Tree Callbacks\"), mdx(\"p\", null, \"Use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onOpen\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onClose\"), \" props if you would like to trigger callbacks on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tree\"), \" open or close, respectively.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Tree\\n  onOpen={() => alert('Open!')}\\n  onClose={() => alert('Close!')}\\n  label=\\\"Cheese\\\"\\n  icon=\\\"Table\\\"\\n>\\n  <TreeItem>Gouda</TreeItem>\\n</Tree>\\n\")), mdx(\"h2\", null, \"Controlling a Tree\"), mdx(\"p\", null, \"Like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Accordion\"), \", a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tree\"), \" can be either uncontrolled or controlled.\"), mdx(\"p\", null, \"By default, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tree\"), \" is an uncontrolled component and maintains its own opened/closed state. If you are using an uncontrolled \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tree\"), \" and want it initially open, use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"defaultOpen\"), \" prop.\"), mdx(\"p\", null, \"However, you can use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"isOpen\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"toggleOpen\"), \" props to explicitly control the state of your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tree\"), \".\"), mdx(\"p\", null, \"When the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"isOpen\"), \" prop receives \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \", your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tree\"), \" will reveal its content. When \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"false\"), \", your content will be hidden.\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"toggleOpen\"), \" prop should receive a function that has one parameter: a boolean. When the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tree\"), \"'s disclosure is clicked, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"toggleOpen\"), \" callback will be triggered and passed the opposite boolean of the current \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"isOpen\"), \" prop value.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \";() => {\\n  const [isOpen, setIsOpen] = useState(true)\\n\\n  return (\\n    <Tree label=\\\"Orders\\\" icon=\\\"Table\\\" isOpen={isOpen} toggleOpen={setIsOpen}>\\n      <TreeItem icon=\\\"FieldNumber\\\">Cost</TreeItem>\\n      <TreeItem icon=\\\"FieldDistance\\\">Location</TreeItem>\\n      <TreeItem icon=\\\"FieldTier\\\">Tier</TreeItem>\\n      <TreeItem icon=\\\"FieldYesNo\\\">Oui ou Non</TreeItem>\\n    </Tree>\\n  )\\n}\\n\")), mdx(\"h2\", null, \"TreeItem\"), mdx(Props, {\n    of: \"TreeItem\",\n    mdxType: \"Props\"\n  }), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TreeItem\"), \" is used to create branches in a tree view; it is best used as the direct child of a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Tree>\"), \".\"), mdx(\"p\", null, \"Unlike \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tree\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TreeItem\"), \" has no \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"label\"), \" prop and instead displays its child as its content.\"), mdx(\"p\", null, \"In addition, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TreeItem\"), \" can accept a callback via its \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onClick\"), \" prop.\"), mdx(\"p\", null, \"Use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"detail\"), \" prop to display a detail element right of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TreeItem\"), \"'s content.\"), mdx(\"p\", null, \"To prevent clicks on the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"detail\"), \" element from triggering the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onClick\"), \" callback, use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"detailStopPropagation\"), \" prop.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"icon\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"iconSize\"), \" can be used to create and customize an icon element left of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TreeItem\"), \"'s content.\"), mdx(\"p\", null, \"Use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gapSize\"), \" to control the distance between elements in your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TreeItem\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Tree label=\\\"Cheeses\\\" defaultOpen>\\n  <TreeItem\\n    icon=\\\"LogoRings\\\"\\n    detail={<Text variant=\\\"text4\\\">is great</Text>}\\n    onClick={() => alert('Clicked Swiss')}\\n  >\\n    Swiss\\n  </TreeItem>\\n</Tree>\\n\")), mdx(\"h2\", null, \"TreeGroup\"), mdx(Props, {\n    of: \"TreeGroup\",\n    mdxType: \"Props\"\n  }), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TreeGroup\"), \" can be used to label a grouping of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TreeItem\"), \"s. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TreeGroup\"), \" should be the child of a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tree\"), \"and the parent of one or many \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TreeItem\"), \"s.\"), mdx(\"p\", null, \"Use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"label\"), \" prop to set the text label of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TreeGroup\"), \".\"), mdx(\"p\", null, \"Use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"color\"), \" prop to set the text color of both the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TreeGroup\"), \" and all of its children.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Tree label=\\\"Cheeses\\\" defaultOpen>\\n  <TreeGroup label=\\\"American\\\">\\n    <TreeItem icon=\\\"LogoRings\\\">Cream</TreeItem>\\n    <TreeItem icon=\\\"LogoRings\\\">Pepper Jack</TreeItem>\\n    <TreeItem icon=\\\"LogoRings\\\">String Cheese</TreeItem>\\n  </TreeGroup>\\n  <TreeGroup label=\\\"English\\\" color=\\\"inform\\\">\\n    <TreeItem icon=\\\"LogoRings\\\">Brighton Blue</TreeItem>\\n    <TreeItem icon=\\\"LogoRings\\\">Cheddar</TreeItem>\\n    <TreeItem icon=\\\"LogoRings\\\">Suffolk Gold</TreeItem>\\n  </TreeGroup>\\n</Tree>\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"figma":null,"github":"Tree","propsOf":"Tree","status":null,"title":"Tree"},"tableOfContents":{"items":[{"url":"#nesting-trees","title":"Nesting Trees"},{"url":"#tree-callbacks","title":"Tree Callbacks"},{"url":"#controlling-a-tree","title":"Controlling a Tree"},{"url":"#treeitem","title":"TreeItem"},{"url":"#treegroup","title":"TreeGroup"}]}}},"pageContext":{"id":"f64c243a-eb48-500c-930a-dd55323b8b9a"}}}