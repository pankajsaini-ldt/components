{"componentChunkName":"component---src-layout-default-tsx","path":"/getting-started/theme/","result":{"data":{"mdx":{"id":"28352953-8d72-5bda-8cf5-6315e88037d7","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Theme\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"To help stay within Looker's design principles, \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/looker-open-source/components/blob/master/packages/design-tokens/src/theme.ts\"\n  }), \"we publish a theme object\"), \", along with libraries, like Styled Components and styled-system, to easily access the theme object within components. For example, when styling components using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"styled\"), \" function, the theme object becomes part of a component's props:\"), mdx(\"h2\", null, \"ThemeProvider\"), mdx(\"p\", null, \"Looker Components require that a Styled Components \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ThemeProvider\"), \" be available and that theme specified have the same structure that is provided by Looker Component's stock \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"theme\"), \" object. See below for information on extending the stock theme for your own use case.\"), mdx(\"p\", null, \"NOTE: For the sake of brevity examples within the documentation generally don't show the ThemeProvider. It's injected as part of the site's code sandbox setup.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \";() => {\\n  /**\\n   *  import { Button, theme } from '@looker/components'\\n   *  import { ThemeProvider } from 'styled-components'\\n   **/\\n\\n  return (\\n    <ThemeProvider theme={theme}>\\n      <Button>Just a regular button</Button>\\n    </ThemeProvider>\\n  )\\n}\\n\")), mdx(\"p\", null, \"You can use the theme's properties within your custom components:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \";() => {\\n  /**\\n   *  import { Button, theme } from '@looker/components'\\n   *  import styled, { ThemeProvider } from 'styled-components'\\n   **/\\n\\n  const DangerButton = styled(Button)`\\n    border-color: ${(props) => props.theme.colors.palette.red500};\\n    background-color: ${(props) => props.theme.colors.palette.red500};\\n  `\\n\\n  return (\\n    <ThemeProvider theme={theme}>\\n      <DangerButton>Danger Wil Robinson!</DangerButton>\\n    </ThemeProvider>\\n  )\\n}\\n\")), mdx(\"h2\", null, \"Extending the Theme\"), mdx(\"p\", null, \"You can extend the theme provided by Looker Components by creating a copy and then providing that version of theme to the ThemeProvider.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \";() => {\\n  /**\\n   *  import { Button, theme } from '@looker/components'\\n   *  import styled, { ThemeProvider } from 'styled-components'\\n   **/\\n\\n  const myTheme = {\\n    ...theme,\\n    myCustomAttribute: 'hotpink',\\n  }\\n\\n  const PrettyButton = styled(Button)`\\n    border-color: ${(props) => props.theme.myCustomAttribute};\\n    background-color: ${(props) => props.theme.myCustomAttribute};\\n  `\\n\\n  return (\\n    <ThemeProvider theme={myTheme}>\\n      <PrettyButton>Pink is so Pretty!</PrettyButton>\\n    </ThemeProvider>\\n  )\\n}\\n\")), mdx(\"h2\", null, \"Nesting ThemeProviders\"), mdx(\"p\", null, \"Styled Components' ThemeProvider acts as a React Context and in so doing is able to support the standard behavior of nested contexts - the theme defined nearest to the component will be the version used.\"), mdx(\"p\", null, \"NOTE: You'll also see that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PrettyButton\"), \" in the example simply falls back to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Button\"), \"'s default style when \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"myCustomAttribute\"), \" isn't assigned.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \";() => {\\n  /**\\n   *  import { Button, theme } from '@looker/components'\\n   *  import styled, { ThemeProvider } from 'styled-components'\\n   **/\\n\\n  const myTheme = {\\n    ...theme,\\n    myCustomAttribute: 'hotpink',\\n  }\\n\\n  const PrettyButton = styled(Button)`\\n    border-color: ${(props) => props.theme.myCustomAttribute};\\n    background-color: ${(props) => props.theme.myCustomAttribute};\\n  `\\n\\n  return (\\n    <ThemeProvider theme={theme}>\\n      <PrettyButton mr=\\\"large\\\">Stock Theme</PrettyButton>\\n\\n      <ThemeProvider theme={myTheme}>\\n        <PrettyButton>Pretty Button with Custom Theme</PrettyButton>\\n      </ThemeProvider>\\n    </ThemeProvider>\\n  )\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Theme"},"tableOfContents":{"items":[{"url":"#themeprovider","title":"ThemeProvider"},{"url":"#extending-the-theme","title":"Extending the Theme"},{"url":"#nesting-themeproviders","title":"Nesting ThemeProviders"}]}}},"pageContext":{"id":"28352953-8d72-5bda-8cf5-6315e88037d7"}}}